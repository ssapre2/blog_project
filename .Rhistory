train_data$home_win
recipe(formula = home_win ~ cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
lag1_win_pct_home +
lag1_win_pct_away +
injured_QB_home,data = train_data)
recipe(formula = home_win ~ cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
injured_QB_home,data = train_data)
recipe(formula = home_win ~ cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
cum_win_pct_lag_1_home +
cum_win_pct_lag_1_away
injured_QB_home,data = train_data)
recipe(formula = home_win ~ cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
cum_win_pct_lag_1_home +
cum_win_pct_lag_1_away +
injured_QB_home,data = train_data)
colSums(is.na(train_data))
recipe(formula = home_win ~ cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
cum_win_pct_lag_1_home +
cum_win_pct_lag_1_away +
injured_QB_home,data = train_data) %>%
#impute
step_impute_knn(columns = starts_with('cum_'),neighbors = 3)
recipe(formula = home_win ~ cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
cum_win_pct_lag_1_home +
cum_win_pct_lag_1_away +
injured_QB_home,data = train_data) %>%
#impute
step_impute_knn(columns = all_predictors(),neighbors = 3)
recipe(formula = home_win ~ cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
cum_win_pct_lag_1_home +
cum_win_pct_lag_1_away +
injured_QB_home,data = train_data) %>%
#impute
step_impute_knn(columns = all_predictors(),neighbors = 5)
rec_impute = recipe(formula = home_win ~ cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
cum_win_pct_lag_1_home +
cum_win_pct_lag_1_away +
injured_QB_home,data = train_data) %>%
#impute
step_impute_knn(columns = all_predictors(),neighbors = 5)
rec_impute = recipe(formula = home_win ~ cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
cum_win_pct_lag_1_home +
cum_win_pct_lag_1_away +
injured_QB_home,data = train_data) %>%
#impute
step_impute_knn(columns = all_numeric_predictors(),neighbors = 5)
colSums(is.na(train_data))
# create a workflow using recipe and model objects
game_pred_wflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(rec_impute)
# Penalized Linear Regression
# Mixture = 1 means pure lasso
lr_mod <-
logistic_reg(penalty = tune(), mixture = 1) %>%
set_engine("glmnet")
# create a workflow using recipe and model objects
game_pred_wflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(rec_impute)
rec_impute
rec_impute = recipe(formula = home_win ~ cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
cum_win_pct_lag_1_home +
cum_win_pct_lag_1_away +
injured_QB_home,data = train_data) %>%
#create ID role (do not remove) game ID
update_role(game_id, new_role = "ID") %>%
#impute
step_impute_knn(columns = all_numeric_predictors(),neighbors =2)
rec_impute = recipe(formula = home_win ~
game_id +
cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
cum_win_pct_lag_1_home +
cum_win_pct_lag_1_away +
injured_QB_home,data = train_data) %>%
#create ID role (do not remove) game ID
update_role(game_id, new_role = "ID") %>%
#impute
step_impute_knn(columns = all_numeric_predictors(),neighbors =2)
# Penalized Linear Regression
# Mixture = 1 means pure lasso
lr_mod <-
logistic_reg(penalty = tune(), mixture = 1) %>%
set_engine("glmnet")
# create a workflow using recipe and model objects
game_pred_wflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(rec_impute)
game_pred_wflow
game_fit <-
game_pred_wflow %>%
fit(data = train_data)
install.packages('glmnet')
library('glmnet')
game_fit <-
game_pred_wflow %>%
fit(data = train_data)
rec_impute
rec_impute = recipe(formula = as.factor(home_win) ~
game_id +
cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
cum_win_pct_lag_1_home +
cum_win_pct_lag_1_away +
injured_QB_home,data = train_data) %>%
#create ID role (do not remove) game ID
update_role(game_id, new_role = "ID") %>%
#impute
step_impute_knn(columns = all_numeric_predictors(),neighbors =2)
# Remove columns
matchup_ready = matchup_ready %>%
select(-c(columns_to_delete)) %>%
# Transform outcome into factor variable
mutate(home_win = as.factor(home_win))
matchup_ready = matchup_ready%>%
# Transform outcome into factor variable
mutate(home_win = as.factor(home_win))
rec_impute = recipe(formula = home_win ~
game_id +
cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
cum_win_pct_lag_1_home +
cum_win_pct_lag_1_away +
injured_QB_home,data = train_data) %>%
#create ID role (do not remove) game ID
update_role(game_id, new_role = "ID") %>%
#impute
step_impute_knn(columns = all_numeric_predictors(),neighbors =2)
# create a workflow using recipe and model objects
game_pred_wflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(rec_impute)
game_fit <-
game_pred_wflow %>%
fit(data = train_data)
# Split Data
trainIndex <- createDataPartition(matchup_full$home_win, p = 0.7, list = FALSE)
train_data <- matchup_full[trainIndex, ]
test_data <- matchup_full[-trainIndex, ] %>%
# Remove first season for now
filter(season != 2011)
library('tidymodels')
rec_impute = recipe(formula = home_win ~
game_id +
cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
cum_win_pct_lag_1_home +
cum_win_pct_lag_1_away +
injured_QB_home,data = train_data) %>%
#create ID role (do not remove) game ID
update_role(game_id, new_role = "ID") %>%
#impute
step_impute_knn(columns = all_numeric_predictors(),neighbors =2)
# Penalized Linear Regression
# Mixture = 1 means pure lasso
lr_mod <-
logistic_reg(penalty = tune(), mixture = 1) %>%
set_engine("glmnet")
# create a workflow using recipe and model objects
game_pred_wflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(rec_impute)
library('glnet')
library('glmnet')
game_fit <-
game_pred_wflow %>%
fit(data = train_data)
str(train_data)
matchups_full %>%
# Transform outcome into factor variable
mutate(home_win = as.factor(home_win)) -> matchup_full
matchup_full %>%
# Transform outcome into factor variable
mutate(home_win = as.factor(home_win)) -> matchup_full
# Split Data
trainIndex <- createDataPartition(matchup_full$home_win, p = 0.7, list = FALSE)
train_data <- matchup_full[trainIndex, ]
test_data <- matchup_full[-trainIndex, ] %>%
# Remove first season for now
filter(season != 2011)
library('tidymodels')
rec_impute = recipe(formula = home_win ~
game_id +
cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
cum_win_pct_lag_1_home +
cum_win_pct_lag_1_away +
injured_QB_home,data = train_data) %>%
#create ID role (do not remove) game ID
update_role(game_id, new_role = "ID") %>%
#impute
step_impute_knn(columns = all_numeric_predictors(),neighbors =2)
# Penalized Linear Regression
# Mixture = 1 means pure lasso
lr_mod <-
logistic_reg(penalty = tune(), mixture = 1) %>%
set_engine("glmnet")
# create a workflow using recipe and model objects
game_pred_wflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(rec_impute)
game_pred_wflow
library('glmnet')
game_fit <-
game_pred_wflow %>%
fit(data = train_data)
rec_impute = recipe(formula = home_win ~
game_id +
cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
cum_win_pct_lag_1_home +
cum_win_pct_lag_1_away +
injured_QB_home,data = train_data) %>%
#create ID role (do not remove) game ID
update_role(game_id, new_role = "ID") %>%
#impute
step_impute_median(columns = all_numeric_predictors())
# Penalized Linear Regression
# Mixture = 1 means pure lasso
lr_mod <-
logistic_reg(penalty = tune(), mixture = 1) %>%
set_engine("glmnet")
# create a workflow using recipe and model objects
game_pred_wflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(rec_impute)
game_pred_wflow
rec_impute
library('glmnet')
game_fit <-
game_pred_wflow %>%
fit(data = train_data)
rec_impute$var_info
rec_impute$term_info
rec_impute = recipe(formula = home_win ~
game_id +
cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
cum_win_pct_lag_1_home +
cum_win_pct_lag_1_away +
injured_QB_home,data = train_data) %>%
#create ID role (do not remove) game ID
update_role(game_id, new_role = "ID") %>%
#impute
step_impute_median(columns = all_numeric_predictors())
# Penalized Linear Regression
# Mixture = 1 means pure lasso
lr_mod <-
logistic_reg(penalty = tune(), mixture = 1) %>%
set_engine("glmnet")
# create a workflow using recipe and model objects
game_pred_wflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(rec_impute)
library('glmnet')
game_fit <-
game_pred_wflow %>%
fit(data = train_data)
prep(rec_impute,training = train_data)
colSums(is.na(train_data))
rec_impute = recipe(formula = home_win ~
game_id +
cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
cum_win_pct_lag_1_home +
cum_win_pct_lag_1_away,
data = train_data) %>%
#create ID role (do not remove) game ID
update_role(game_id, new_role = "ID") %>%
#impute
step_impute_median(columns = all_numeric_predictors())
# Penalized Linear Regression
# Mixture = 1 means pure lasso
lr_mod <-
logistic_reg(penalty = tune(), mixture = 1) %>%
set_engine("glmnet")
# create a workflow using recipe and model objects
game_pred_wflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(rec_impute)
prep(rec_impute,training = train_data)
rec_impute$steps
rec_impute$levels
rec_impute$var_info
rec_impute$var_info$type
str(train_data)
tidy(rec_impute)
rec_impute = recipe(formula = home_win ~
game_id +
cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
cum_win_pct_lag_1_home +
cum_win_pct_lag_1_away,
data = train_data) %>%
#create ID role (do not remove) game ID
update_role(game_id, new_role = "ID") %>%
#impute
step_impute_median(columns = all_numeric_predictors()) %>% tidy()
rec_impute
library('tidymodels')
rec_impute = recipe(formula = home_win ~
game_id +
cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
cum_win_pct_lag_1_home +
cum_win_pct_lag_1_away,
data = train_data) %>%
#create ID role (do not remove) game ID
update_role(game_id, new_role = "ID") %>%
#impute
step_impute_median(columns = all_numeric_predictors())
# Evalate imputation step
tidy(rec_impute, number = 1)
rec_impute = recipe(formula = home_win ~
game_id +
cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
cum_win_pct_lag_1_home +
cum_win_pct_lag_1_away,
data = train_data) %>%
#create ID role (do not remove) game ID
update_role(game_id, new_role = "ID") %>%
#impute
step_impute_median(columns = all_numeric_predictors())
# Evalate imputation step
tidy(rec_impute, number = 1)
rec_impute = recipe(formula = home_win ~
game_id +
cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
cum_win_pct_lag_1_home +
cum_win_pct_lag_1_away,
data = train_data) %>%
#create ID role (do not remove) game ID
update_role(game_id, new_role = "ID") %>%
#impute
step_impute_median(all_numeric_predictors())
# Evalate imputation step
tidy(rec_impute, number = 1)
rec_impute = recipe(formula = home_win ~
game_id +
cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
cum_win_pct_lag_1_home +
cum_win_pct_lag_1_away,
data = train_data) %>%
#create ID role (do not remove) game ID
update_role(game_id, new_role = "ID") %>%
#impute
step_impute_median(all_numeric())
# Evalate imputation step
tidy(rec_impute, number = 1)
rec_impute = recipe(formula = home_win ~
game_id +
cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
cum_win_pct_lag_1_home +
cum_win_pct_lag_1_away,
data = train_data) %>%
#create ID role (do not remove) game ID
update_role(game_id, new_role = "ID") %>%
#impute
step_impute_median(contains('cum_'))
# Evalate imputation step
tidy(rec_impute, number = 1)
rec_impute = recipe(formula = home_win ~
game_id +
cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
cum_win_pct_lag_1_home +
cum_win_pct_lag_1_away,
data = train_data) %>%
#create ID role (do not remove) game ID
update_role(game_id, new_role = "ID") %>%
#impute
step_impute_median(starts_with('cum_'))
# Evalate imputation step
tidy(rec_impute, number = 1)
imp_models <- prep(impute_rec, training = train_data)
imp_models <- prep(rec_impute, training = train_data)
tidy(imp_models)
rec_impute = recipe(formula = home_win ~
game_id +
cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
cum_win_pct_lag_1_home +
cum_win_pct_lag_1_away,
data = train_data) %>%
#create ID role (do not remove) game ID
update_role(game_id, new_role = "ID") %>%
#impute
step_impute_median(cum_score_lag_1_home,
cum_opp_lag_1_home,
cum_score_lag_1_away)
# Evalate imputation step
tidy(rec_impute, number = 1)
tidy(imp_models,number = 1)
rec_impute = recipe(formula = home_win ~
game_id +
cum_score_lag_1_home +
cum_opp_lag_1_home + cum_score_lag_1_away +
cum_opp_lag_1_away +
cum_win_pct_lag_1_home +
cum_win_pct_lag_1_away,
data = train_data) %>%
#create ID role (do not remove) game ID
update_role(game_id, new_role = "ID") %>%
#impute
step_impute_median(starts_with('cum_'))
imp_models <- prep(rec_impute, training = train_data)
tidy(imp_models,number = 1)
# Penalized Linear Regression
# Mixture = 1 means pure lasso
lr_mod <-
logistic_reg(penalty = tune(), mixture = 1) %>%
set_engine("glmnet")
# create a workflow using recipe and model objects
game_pred_wflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(rec_impute)
prep(rec_impute,training = train_data)
game_fit <-
game_pred_wflow %>%
fit(data = train_data)
View(game_fit)
extract_fit_parsnip(game_fit)
extract_fit_parsnip(game_fit) %>%
tidy()
extract_fit_parsnip(game_fit)-> fit_extra
View(fit_extra)
# Penalized Linear Regression
# Mixture = 1 means pure lasso
lr_mod <-
logistic_reg(penalty = 1, mixture = 1) %>%
set_engine("glmnet")
# create a workflow using recipe and model objects
game_pred_wflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(rec_impute)
library('glmnet')
prep(rec_impute,training = train_data)
game_fit <-
game_pred_wflow %>%
fit(data = train_data)
extract_fit_parsnip(game_fit)-> fit_extra
extract_fit_parsnip(game_fit) %>%
tidy()
# Penalized Linear Regression
# Mixture = 1 means pure lasso
lr_mod <-
logistic_reg(penalty = 0.1, mixture = 1) %>%
set_engine("glmnet")
# create a workflow using recipe and model objects
game_pred_wflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(rec_impute)
library('glmnet')
prep(rec_impute,training = train_data)
game_fit <-
game_pred_wflow %>%
fit(data = train_data)
extract_fit_parsnip(game_fit) %>%
tidy()
