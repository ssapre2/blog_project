inner_join(out_inj, by = c('season','club_code' = 'team','gsis_id','game_type','week')) -> injured_starters
# Number of injuries by position
injured_starters %>%
group_by(season,club_code,week,position) %>%
summarise(starters_injured = n()) %>%
ungroup() %>%
pivot_wider(names_from = position, names_prefix = "injured_",values_from = starters_injured) -> injuries_position
head(injuries_position)
nfl_game_results %>%
inner_join(cumul_avgs, by = c('game_id','season','week','home_team' = 'team')) %>%
inner_join(cumul_avgs, by = c('game_id','season','week','away_team' = 'team'),suffix = c('_home','_away'))-> w_avgs
# Check for stragglers
nfl_game_results %>%
anti_join(cumul_avgs, by = c('game_id','season','home_team' = 'team','week')) -> unplayed_games
# Join previous season's results
#w_avgs %>%
#  left_join(team_win_pct,by = c('season','home_team' = 'team')) %>%
#  left_join(team_win_pct, by = c('away_team' = 'team','season'),suffix = c('_home','_away')) -> matchups
# Indicate whether home team won
w_avgs %>%
mutate(home_win = as.numeric(result > 0)) -> matchups
matchups %>%
left_join(injuries_position,by = c('season','home_team'='club_code','week')) %>%
left_join(injuries_position,by = c('season','away_team'='club_code','week'),suffix = c('_home','_away')) %>%
mutate(across(starts_with('injured_'), ~replace_na(.x, 0))) -> matchup_full
matchup_full %>%
select(-c(home_score,away_score,overtime,home_team,away_team,away_qb_name,home_qb_name,referee,stadium,home_coach,away_coach,ftn,espn,old_game_id,gsis,nfl_detail_id,pfr,pff,result)) -> matchup_ready
# Remove columns
matchup_ready = matchup_ready%>%
# Transform outcome into factor variable
select(where(is.numeric),game_id) %>%
mutate(home_win = as.factor(home_win))
# Split Data
set.seed(123)
matchups24 = matchup_ready %>% filter(season == 2024)
splits = matchup_ready %>%
filter(season != 2024) %>%
initial_split(prop = 0.7)
train_data <- training(splits)
test_data  <- testing(splits)
colnames(train_data)
library(naniar)
gg_miss_var(x = train_data,show_pct = T)
library('tidymodels')
rec_impute = recipe(formula = home_win ~ .,
data = train_data) %>%
#create ID role (do not remove) game ID. We'll use this to match predictions to specific games
update_role(game_id, new_role = "ID") %>%
#for each numeric variable/feature, replace any NA's with the median value of that variable/feature
step_impute_median(all_numeric_predictors())
# Create recipe to for moneyline model
# Evalate imputation step
tidy(rec_impute, number = 1)
imp_models <- rec_impute %>%
check_missing(all_numeric_predictors()) %>%
prep(training = train_data)
# Check if imputation worked
imp_models %>%
bake(train_data) %>%
is.na() %>%
colSums()
tidy(imp_models,number = 1)
library('glmnet')
# Penalized Linear Regression
# Mixture = 1 means pure lasso
lr_mod <-
logistic_reg(mixture = 0.05,penalty = 1) %>%
set_engine("glmnet")
# Create folds for cross-validation
folds <- vfold_cv(train_data)
# create a workflow using recipe and model objects
game_pred_wflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(rec_impute)
fit_cv = game_pred_wflow %>%
fit_resamples(folds)
collect_metrics(fit_cv)
final_wf = game_pred_wflow %>%
last_fit(splits)
final_model = extract_workflow(final_wf)
final_model %>%
extract_fit_engine() %>%
tidy() %>%
rename(penalty = lambda)
# Align predictions to test dataset
predicted_df = augment(final_model,test_data)
# Extract model specs
final_model %>%
extract_spec_parsnip() -> final_specs
# Update workflow object and retrain on full training set w/ same parameters
game_pred_wflow %>%
update_model(spec = final_specs) %>%
# Bind test and training data together
fit(data = cbind(train_data,test_data))-> final_flow
final_model %>%
save(file = "gamePred_model2024.rda")
getwd()
```{r ingnore = T}
final_model %>%
save(file = "gamePred_model2024.rda")
final_model %>%
save(file = "gamePred_model2024.rda")
final_model %>%
save(file = "C:/Users/samee/Blog Projects/files/gamePred_model2024.rda")
final_model %>%
save(file = "C:/Users/samee/Blog Projects/files/models/nflgamePred_model2024.rda")
final_model %>%
save(file = "gamePred_model2024.rda")
library(yaml)
final_model %>%
write_yaml(file = "gamePred_model2024.yml")
final_model %>%
write_yaml( "gamePred_model2024.yml")
final_model
final_flow %>%
extract_fit_parsnip()
final_flow %>%
extract_fit_parsnip() %>%
save(file = "gamePred_model2024.rda")
getwd()
final_flow %>%
extract_fit_parsnip() %>%
saveRDS(file = "gamePred_model2024.rda")
final_flow %>%
extract_fit_parsnip() %>%
saveRDS(file = "~/gamePred_model2024.rda")
getwd('~')
setwd('~')
getwd()
setwd("C:/Users/samee/Blog Projects/blog_project")
final_flow %>%
extract_fit_parsnip() %>%
saveRDS(file = "gamePred_model2024.rda")
getwd()
```{r}
# install and load packages
#install.packages("nflreadr")
library('nflreadr')
library("tidyverse")
library('pROC')
library('tidymodels')
# Scrape schedule Results
load_schedules(seasons = seq(2011,2024)) -> nfl_game_results
head(nfl_game_results)
nfl_game_results %>%
# Remove the upcoming season
filter(season < 2024) %>%
pivot_longer(cols = c(away_team,home_team),
names_to = "home_away",
values_to = "team") %>%
mutate(team_score = ifelse(home_away == "home_team",yes = home_score,no = away_score),
opp_score = ifelse(home_away == "home_team", away_score,home_score)) %>%  # sort for cumulative avg
arrange(season,week) %>%
select(season,game_id,team,team_score,opp_score,week) -> team_games
team_games %>%
arrange(week) %>%
group_by(season,team) %>%
# For each team's season calculate the cumulative scores for after each week
mutate(cumul_score_mean = cummean(team_score),
cumul_score_opp = cummean(opp_score),
cumul_wins = cumsum(team_score > opp_score),
cumul_losses = cumsum(team_score < opp_score),
cumul_ties = cumsum(team_score == opp_score),
cumul_win_pct = cumul_wins / (cumul_wins + cumul_losses),
# Create the lag variable
cumul_win_pct_lag_1 = lag(cumul_win_pct,1),
cumul_score_lag_1 = lag(cumul_score_mean,1),
cumul_opp_lag_1 = lag(cumul_score_opp,1)
) %>%
# Non-lag variables leak info
select(week,game_id,contains('lag_1')) %>%
ungroup() -> cumul_avgs
team_games %>%
group_by(season,team) %>%
summarise(wins = sum(team_score > opp_score),
losses = sum(team_score < opp_score),
ties = sum(team_score == opp_score))%>%
ungroup() %>%
arrange(season) %>%
group_by(team) %>%
mutate(win_pct = wins / (wins + losses),
lag1_win_pct = lag(win_pct,1)) %>%
ungroup() -> team_win_pct
# Load depth charts and injury reports
dc = load_depth_charts(seq(2011,most_recent_season()))
injuries = load_injuries(seq(2011,most_recent_season()))
injuries %>%
filter(report_status == "Out") -> out_inj
dc %>%
filter(depth_team == 1) -> starters
# Determine roster position of injured players
starters %>%
select(-c(last_name,first_name,position,full_name)) %>%
inner_join(out_inj, by = c('season','club_code' = 'team','gsis_id','game_type','week')) -> injured_starters
# Number of injuries by position
injured_starters %>%
group_by(season,club_code,week,position) %>%
summarise(starters_injured = n()) %>%
ungroup() %>%
pivot_wider(names_from = position, names_prefix = "injured_",values_from = starters_injured) -> injuries_position
head(injuries_position)
nfl_game_results %>%
inner_join(cumul_avgs, by = c('game_id','season','week','home_team' = 'team')) %>%
inner_join(cumul_avgs, by = c('game_id','season','week','away_team' = 'team'),suffix = c('_home','_away'))-> w_avgs
# Check for stragglers
nfl_game_results %>%
anti_join(cumul_avgs, by = c('game_id','season','home_team' = 'team','week')) -> unplayed_games
# Join previous season's results
#w_avgs %>%
#  left_join(team_win_pct,by = c('season','home_team' = 'team')) %>%
#  left_join(team_win_pct, by = c('away_team' = 'team','season'),suffix = c('_home','_away')) -> matchups
# Indicate whether home team won
w_avgs %>%
mutate(home_win = as.numeric(result > 0)) -> matchups
matchups %>%
left_join(injuries_position,by = c('season','home_team'='club_code','week')) %>%
left_join(injuries_position,by = c('season','away_team'='club_code','week'),suffix = c('_home','_away')) %>%
mutate(across(starts_with('injured_'), ~replace_na(.x, 0))) -> matchup_full
matchup_full %>%
select(-c(home_score,away_score,overtime,home_team,away_team,away_qb_name,home_qb_name,referee,stadium,home_coach,away_coach,ftn,espn,old_game_id,gsis,nfl_detail_id,pfr,pff,result)) -> matchup_ready
# Remove columns
matchup_ready = matchup_ready%>%
# Transform outcome into factor variable
select(where(is.numeric),game_id) %>%
mutate(home_win = as.factor(home_win))
write.csv(x = matchups24,,file = file.path(getwd(),'posts','nfl-game-prediction-2','matchups24.csv'))
write.csv(x = matchups24,,file = file.path(getwd(),'posts','nfl-game prediction-2','matchups24.csv'))
knitr::opts_chunk$set(echo = TRUE)
matchups24 = read.csv('matchups24.csv')
View(matchups24)
matchups24 = matchup_ready %>% filter(season == 2024)
nfl_game_results$season %>% max()
# install and load packages
#install.packages("nflreadr")
library('nflreadr')
library("tidyverse")
library('pROC')
library('tidymodels')
# Scrape schedule Results
load_schedules(seasons = seq(2011,2024)) -> nfl_game_results
head(nfl_game_results)
nfl_game_results %>%
pivot_longer(cols = c(away_team,home_team),
names_to = "home_away",
values_to = "team") %>%
mutate(team_score = ifelse(home_away == "home_team",yes = home_score,no = away_score),
opp_score = ifelse(home_away == "home_team", away_score,home_score)) %>%  # sort for cumulative avg
arrange(season,week) %>%
select(season,game_id,team,team_score,opp_score,week) -> team_games
team_games %>%
arrange(week) %>%
group_by(season,team) %>%
# For each team's season calculate the cumulative scores for after each week
mutate(cumul_score_mean = cummean(team_score),
cumul_score_opp = cummean(opp_score),
cumul_wins = cumsum(team_score > opp_score),
cumul_losses = cumsum(team_score < opp_score),
cumul_ties = cumsum(team_score == opp_score),
cumul_win_pct = cumul_wins / (cumul_wins + cumul_losses),
# Create the lag variable
cumul_win_pct_lag_1 = lag(cumul_win_pct,1),
cumul_score_lag_1 = lag(cumul_score_mean,1),
cumul_opp_lag_1 = lag(cumul_score_opp,1)
) %>%
# Non-lag variables leak info
select(week,game_id,contains('lag_1')) %>%
ungroup() -> cumul_avgs
team_games %>%
group_by(season,team) %>%
summarise(wins = sum(team_score > opp_score),
losses = sum(team_score < opp_score),
ties = sum(team_score == opp_score))%>%
ungroup() %>%
arrange(season) %>%
group_by(team) %>%
mutate(win_pct = wins / (wins + losses),
lag1_win_pct = lag(win_pct,1)) %>%
ungroup() -> team_win_pct
# Load depth charts and injury reports
dc = load_depth_charts(seq(2011,most_recent_season()))
injuries = load_injuries(seq(2011,most_recent_season()))
injuries %>%
filter(report_status == "Out") -> out_inj
dc %>%
filter(depth_team == 1) -> starters
# Determine roster position of injured players
starters %>%
select(-c(last_name,first_name,position,full_name)) %>%
inner_join(out_inj, by = c('season','club_code' = 'team','gsis_id','game_type','week')) -> injured_starters
# Number of injuries by position
injured_starters %>%
group_by(season,club_code,week,position) %>%
summarise(starters_injured = n()) %>%
ungroup() %>%
pivot_wider(names_from = position, names_prefix = "injured_",values_from = starters_injured) -> injuries_position
head(injuries_position)
nfl_game_results %>%
inner_join(cumul_avgs, by = c('game_id','season','week','home_team' = 'team')) %>%
inner_join(cumul_avgs, by = c('game_id','season','week','away_team' = 'team'),suffix = c('_home','_away'))-> w_avgs
# Check for stragglers
nfl_game_results %>%
anti_join(cumul_avgs, by = c('game_id','season','home_team' = 'team','week')) -> unplayed_games
# Join previous season's results
#w_avgs %>%
#  left_join(team_win_pct,by = c('season','home_team' = 'team')) %>%
#  left_join(team_win_pct, by = c('away_team' = 'team','season'),suffix = c('_home','_away')) -> matchups
# Indicate whether home team won
w_avgs %>%
mutate(home_win = as.numeric(result > 0)) -> matchups
matchups %>%
left_join(injuries_position,by = c('season','home_team'='club_code','week')) %>%
left_join(injuries_position,by = c('season','away_team'='club_code','week'),suffix = c('_home','_away')) %>%
mutate(across(starts_with('injured_'), ~replace_na(.x, 0))) -> matchup_full
matchup_full %>%
select(-c(home_score,away_score,overtime,home_team,away_team,away_qb_name,home_qb_name,referee,stadium,home_coach,away_coach,ftn,espn,old_game_id,gsis,nfl_detail_id,pfr,pff,result)) -> matchup_ready
# Remove columns
matchup_ready = matchup_ready%>%
# Transform outcome into factor variable
select(where(is.numeric),game_id) %>%
mutate(home_win = as.factor(home_win))
# Split Data
set.seed(123)
matchups24 = matchup_ready %>% filter(season == 2024)
splits = matchup_ready %>%
filter(season != 2024) %>%
initial_split(prop = 0.7)
train_data <- training(splits)
test_data  <- testing(splits)
write.csv(x = matchups24,,file = file.path(getwd(),'posts','nfl-game prediction-2','matchups24.csv'))
matchups24 = read.csv('matchups24.csv')
View(matchups24)
setwd("C:/Users/samee/Blog Projects/blog_project/posts/nfl-game prediction-2")
# Load parsnip fit
model1 = load('gamePred_model2024.rda')
# Load parsnip fit
model1 = load('"C:\Users\samee\OneDrive\Documents\gamePred_model2024.rda"')
# Load parsnip fit
model1 = load('"C:/Users/samee/OneDrive/Documents/gamePred_model2024.rda"')
# install and load packages
#install.packages("nflreadr")
library('nflreadr')
library("tidyverse")
library('pROC')
library('tidymodels')
# Scrape schedule Results
load_schedules(seasons = seq(2011,2024)) -> nfl_game_results
head(nfl_game_results)
nfl_game_results %>%
pivot_longer(cols = c(away_team,home_team),
names_to = "home_away",
values_to = "team") %>%
mutate(team_score = ifelse(home_away == "home_team",yes = home_score,no = away_score),
opp_score = ifelse(home_away == "home_team", away_score,home_score)) %>%  # sort for cumulative avg
arrange(season,week) %>%
select(season,game_id,team,team_score,opp_score,week) -> team_games
team_games %>%
arrange(week) %>%
group_by(season,team) %>%
# For each team's season calculate the cumulative scores for after each week
mutate(cumul_score_mean = cummean(team_score),
cumul_score_opp = cummean(opp_score),
cumul_wins = cumsum(team_score > opp_score),
cumul_losses = cumsum(team_score < opp_score),
cumul_ties = cumsum(team_score == opp_score),
cumul_win_pct = cumul_wins / (cumul_wins + cumul_losses),
# Create the lag variable
cumul_win_pct_lag_1 = lag(cumul_win_pct,1),
cumul_score_lag_1 = lag(cumul_score_mean,1),
cumul_opp_lag_1 = lag(cumul_score_opp,1)
) %>%
# Non-lag variables leak info
select(week,game_id,contains('lag_1')) %>%
ungroup() -> cumul_avgs
team_games %>%
group_by(season,team) %>%
summarise(wins = sum(team_score > opp_score),
losses = sum(team_score < opp_score),
ties = sum(team_score == opp_score))%>%
ungroup() %>%
arrange(season) %>%
group_by(team) %>%
mutate(win_pct = wins / (wins + losses),
lag1_win_pct = lag(win_pct,1)) %>%
ungroup() -> team_win_pct
# Load depth charts and injury reports
dc = load_depth_charts(seq(2011,most_recent_season()))
injuries = load_injuries(seq(2011,most_recent_season()))
injuries %>%
filter(report_status == "Out") -> out_inj
dc %>%
filter(depth_team == 1) -> starters
# Determine roster position of injured players
starters %>%
select(-c(last_name,first_name,position,full_name)) %>%
inner_join(out_inj, by = c('season','club_code' = 'team','gsis_id','game_type','week')) -> injured_starters
# Number of injuries by position
injured_starters %>%
group_by(season,club_code,week,position) %>%
summarise(starters_injured = n()) %>%
ungroup() %>%
pivot_wider(names_from = position, names_prefix = "injured_",values_from = starters_injured) -> injuries_position
head(injuries_position)
nfl_game_results %>%
inner_join(cumul_avgs, by = c('game_id','season','week','home_team' = 'team')) %>%
inner_join(cumul_avgs, by = c('game_id','season','week','away_team' = 'team'),suffix = c('_home','_away'))-> w_avgs
# Check for stragglers
nfl_game_results %>%
anti_join(cumul_avgs, by = c('game_id','season','home_team' = 'team','week')) -> unplayed_games
# Join previous season's results
#w_avgs %>%
#  left_join(team_win_pct,by = c('season','home_team' = 'team')) %>%
#  left_join(team_win_pct, by = c('away_team' = 'team','season'),suffix = c('_home','_away')) -> matchups
# Indicate whether home team won
w_avgs %>%
mutate(home_win = as.numeric(result > 0)) -> matchups
matchups %>%
left_join(injuries_position,by = c('season','home_team'='club_code','week')) %>%
left_join(injuries_position,by = c('season','away_team'='club_code','week'),suffix = c('_home','_away')) %>%
mutate(across(starts_with('injured_'), ~replace_na(.x, 0))) -> matchup_full
matchup_full %>%
select(-c(home_score,away_score,overtime,home_team,away_team,away_qb_name,home_qb_name,referee,stadium,home_coach,away_coach,ftn,espn,old_game_id,gsis,nfl_detail_id,pfr,pff,result)) -> matchup_ready
# Remove columns
matchup_ready = matchup_ready%>%
# Transform outcome into factor variable
select(where(is.numeric),game_id) %>%
mutate(home_win = as.factor(home_win))
# Split Data
set.seed(123)
matchups24 = matchup_ready %>% filter(season == 2024)
splits = matchup_ready %>%
filter(season != 2024) %>%
initial_split(prop = 0.7)
train_data <- training(splits)
test_data  <- testing(splits)
colnames(train_data)
library(naniar)
gg_miss_var(x = train_data,show_pct = T)
library('tidymodels')
rec_impute = recipe(formula = home_win ~ .,
data = train_data) %>%
#create ID role (do not remove) game ID. We'll use this to match predictions to specific games
update_role(game_id, new_role = "ID") %>%
#for each numeric variable/feature, replace any NA's with the median value of that variable/feature
step_impute_median(all_numeric_predictors())
# Create recipe to for moneyline model
# Evalate imputation step
tidy(rec_impute, number = 1)
imp_models <- rec_impute %>%
check_missing(all_numeric_predictors()) %>%
prep(training = train_data)
# Check if imputation worked
imp_models %>%
bake(train_data) %>%
is.na() %>%
colSums()
tidy(imp_models,number = 1)
library('glmnet')
# Penalized Linear Regression
# Mixture = 1 means pure lasso
lr_mod <-
logistic_reg(mixture = 0.05,penalty = 1) %>%
set_engine("glmnet")
# Create folds for cross-validation
folds <- vfold_cv(train_data)
# create a workflow using recipe and model objects
game_pred_wflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(rec_impute)
fit_cv = game_pred_wflow %>%
fit_resamples(folds)
collect_metrics(fit_cv)
final_wf = game_pred_wflow %>%
last_fit(splits)
final_model = extract_workflow(final_wf)
final_model %>%
extract_fit_engine() %>%
tidy() %>%
rename(penalty = lambda)
# Align predictions to test dataset
predicted_df = augment(final_model,test_data)
# Extract model specs
final_model %>%
extract_spec_parsnip() -> final_specs
# Update workflow object and retrain on full training set w/ same parameters
game_pred_wflow %>%
update_model(spec = final_specs) %>%
# Bind test and training data together
fit(data = cbind(train_data,test_data))-> final_flow
library(yaml)
final_flow %>%
extract_fit_parsnip() %>%
saveRDS(file = "gamePred_model2024.rda")
knitr::opts_chunk$set(echo = TRUE)
# Load prepared data from last post
matchups24 = read.csv('matchups24.csv')
# Load parsnip fit
model1 = load('"C:/Users/samee/OneDrive/Documents/gamePred_model2024.rda"')
knitr::opts_chunk$set(echo = TRUE)
runif(17, max = 10)
runif(17, max = 10) %>% round()
round(rnrom(17, max = 10))
round(rnom(17, max = 10))
round(rnorm(17, max = 10))
round(runif(17, max = 15))
round(runif(17, max = 12))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nflreadr)
library(tidymodels)
library(nflfastR)
