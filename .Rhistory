# install and load packages
#install.packages("nflreadr")
library('nflreadr')
library('lme4')
library('caret')
library("tidyverse")
library('pROC')
# Scrape schedule Results
load_schedules(seasons = seq(2011,2021)) -> nfl_game_results
head(nfl_game_results)
nfl_game_results %>%
pivot_longer(cols = c(away_team,home_team),
names_to = "home_away",
values_to = "team") %>%
mutate(team_score = ifelse(home_away == "home_team",yes = home_score,no = away_score),
opp_score = ifelse(home_away == "home_team", away_score,home_score)) %>%  # sort for cumulative avg
arrange(season,week) %>%
select(season,game_id,team,team_score,opp_score,week) -> team_games
team_games %>%
arrange(week) %>%
group_by(season,team) %>%
mutate(cum_score_mean = cummean(team_score),
cum_score_opp = cummean(opp_score),
cum_wins = cumsum(team_score > opp_score),
cum_losses = cumsum(team_score < opp_score),
cum_ties = cumsum(team_score == opp_score),
cum_win_pct = cum_wins / (cum_wins + cum_losses),
cum_win_pct_lag_1 = lag(cum_win_pct,1),
cum_score_lag_1 = lag(cum_score_mean,1),
cum_opp_lag_1 = lag(cum_score_opp,1)
) %>%
# Non-lag variables leak info
select(week,game_id,contains('lag_1')) %>%
ungroup() -> cum_avgs
team_games %>%
group_by(season,team) %>%
summarise(wins = sum(team_score > opp_score),
losses = sum(team_score < opp_score),
ties = sum(team_score == opp_score))%>%
ungroup() %>%
arrange(season) %>%
group_by(team) %>%
mutate(win_pct = wins / (wins + losses),
lag1_win_pct = lag(win_pct,1)) %>%
ungroup() -> team_win_pct
dc = load_depth_charts(seq(2011,2021))
injuries = load_injuries(seq(2011,2021))
injuries %>%
filter(report_status == "Out") -> out_inj
dc %>%
filter(depth_team == 1) -> starters
starters %>%
select(-c(last_name,first_name,position,full_name)) %>%
inner_join(out_inj, by = c('season','club_code' = 'team','gsis_id','game_type','week')) -> injured_starters
# Number of injuries by position
injured_starters %>%
group_by(season,club_code,week,position) %>%
summarise(starters_injured = n()) %>%
ungroup() %>%
pivot_wider(names_from = position, names_prefix = "injured_",values_from = starters_injured) -> injuries_position
head(injuries_position)
nfl_game_results %>%
inner_join(cum_avgs, by = c('game_id','season','home_team' = 'team')) %>%
inner_join(cum_avgs, by = c('game_id','season','away_team' = 'team'),suffix = c('_home','_away'))-> w_avgs
# Check for stragglers
nfl_game_results %>%
anti_join(cum_avgs, by = c('game_id','season','home_team' = 'team')) %>%
nrow()
# Join previous season's results
#w_avgs %>%
#  left_join(team_win_pct,by = c('season','home_team' = 'team')) %>%
#  left_join(team_win_pct, by = c('away_team' = 'team','season'),suffix = c('_home','_away')) -> matchups
# Indicate whether home team won
w_avgs %>%
mutate(home_win = result > 0) -> matchups
matchups %>%
left_join(injuries_position,by = c('season','home_team'='club_code','week')) %>%
left_join(injuries_position,by = c('season','away_team'='club_code','week'),suffix = c('_home','_away')) %>%
mutate(across(starts_with('injured_'), ~replace_na(.x, 0))) -> matchup_full
matchup_full %>%
select(-c(home_score,away_score,overtime,home_team,away_team,away_qb_name,home_qb_name)) -> matchup_ready
colSums(is.na(matchup_ready))
# Hold
trainIndex <- createDataPartition(matchup_full$home_win, p = 0.7, list = FALSE)
train_data <- matchup_full[trainIndex, ]
test_data <- matchup_full[-trainIndex, ] %>%
# Remove first season
filter(season != 2011)
colSums(is.na(matchup_ready)) > 0
colSums(is.na(matchup_ready)) >= 176
colnames(matchup_ready[colSums(is.na(matchup_ready)) >= 176])
colnames(matchup_ready[colSums(is.na(matchup_ready)) > 176])
colnames(matchup_ready[colSums(is.na(matchup_ready)) > 177])
colnames(matchup_ready[colSums(is.na(matchup_ready)) > 177]) -> columns_to_delete
columns_to_delete
# Hold
trainIndex <- createDataPartition(matchup_full$home_win, p = 0.7, list = FALSE)
train_data <- matchup_full[trainIndex, ]
test_data <- matchup_full[-trainIndex, ] %>%
# Remove first season
filter(season != 2011)
head(train_data)
colnames(matchup_ready[colSums(is.na(matchup_ready)) > 177]) -> columns_to_delete
columns_to_delete
View(cum_avgs)
View(w_avgs)
nfl_game_results %>%
inner_join(cum_avgs, by = c('game_id','season','week','home_team' = 'team')) %>%
inner_join(cum_avgs, by = c('game_id','season','week','away_team' = 'team'),suffix = c('_home','_away'))-> w_avgs
# Check for stragglers
nfl_game_results %>%
anti_join(cum_avgs, by = c('game_id','season','home_team' = 'team')) %>%
nrow()
# Join previous season's results
#w_avgs %>%
#  left_join(team_win_pct,by = c('season','home_team' = 'team')) %>%
#  left_join(team_win_pct, by = c('away_team' = 'team','season'),suffix = c('_home','_away')) -> matchups
```
View(w_avgs)
View(cum_avgs)
# Check for stragglers
nfl_game_results %>%
anti_join(cum_avgs, by = c('game_id','season','home_team' = 'team','week')) %>%
nrow()
# Indicate whether home team won
w_avgs %>%
mutate(home_win = result > 0) -> matchups
matchups %>%
left_join(injuries_position,by = c('season','home_team'='club_code','week')) %>%
left_join(injuries_position,by = c('season','away_team'='club_code','week'),suffix = c('_home','_away')) %>%
mutate(across(starts_with('injured_'), ~replace_na(.x, 0))) -> matchup_full
matchup_full %>%
select(-c(home_score,away_score,overtime,home_team,away_team,away_qb_name,home_qb_name)) -> matchup_ready
colSums(is.na(matchup_ready))
colnames(matchup_ready[colSums(is.na(matchup_ready)) > 177]) -> columns_to_delete
columns_to_delete
# Hold
trainIndex <- createDataPartition(matchup_full$home_win, p = 0.7, list = FALSE)
train_data <- matchup_full[trainIndex, ]
test_data <- matchup_full[-trainIndex, ] %>%
# Remove first season
filter(season != 2011)
head(train_data)
View(train_data)
# install and load packages
#install.packages("nflreadr")
library('nflreadr')
library('lme4')
library('caret')
library("tidyverse")
library('pROC')
# Scrape schedule Results
load_schedules(seasons = seq(2011,2021)) -> nfl_game_results
head(nfl_game_results)
# Scrape schedule Results
load_schedules(seasons = seq(2011,2021)) -> nfl_game_results
head(nfl_game_results)
# install and load packages
#install.packages("nflreadr")
library('nflreadr')
library('lme4')
library('caret')
library("tidyverse")
library('pROC')
# Scrape schedule Results
load_schedules(seasons = seq(2011,2021)) -> nfl_game_results
head(nfl_game_results)
nfl_game_results %>%
pivot_longer(cols = c(away_team,home_team),
names_to = "home_away",
values_to = "team") %>%
mutate(team_score = ifelse(home_away == "home_team",yes = home_score,no = away_score),
opp_score = ifelse(home_away == "home_team", away_score,home_score)) %>%  # sort for cumulative avg
arrange(season,week) %>%
select(season,game_id,team,team_score,opp_score,week) -> team_games
team_games %>%
arrange(week) %>%
group_by(season,team) %>%
mutate(cum_score_mean = cummean(team_score),
cum_score_opp = cummean(opp_score),
cum_wins = cumsum(team_score > opp_score),
cum_losses = cumsum(team_score < opp_score),
cum_ties = cumsum(team_score == opp_score),
cum_win_pct = cum_wins / (cum_wins + cum_losses),
cum_win_pct_lag_1 = lag(cum_win_pct,1),
cum_score_lag_1 = lag(cum_score_mean,1),
cum_opp_lag_1 = lag(cum_score_opp,1)
) %>%
# Non-lag variables leak info
select(week,game_id,contains('lag_1')) %>%
ungroup() -> cum_avgs
team_games %>%
group_by(season,team) %>%
summarise(wins = sum(team_score > opp_score),
losses = sum(team_score < opp_score),
ties = sum(team_score == opp_score))%>%
ungroup() %>%
arrange(season) %>%
group_by(team) %>%
mutate(win_pct = wins / (wins + losses),
lag1_win_pct = lag(win_pct,1)) %>%
ungroup() -> team_win_pct
dc = load_depth_charts(seq(2011,2021))
injuries = load_injuries(seq(2011,2021))
injuries %>%
filter(report_status == "Out") -> out_inj
dc %>%
filter(depth_team == 1) -> starters
starters %>%
select(-c(last_name,first_name,position,full_name)) %>%
inner_join(out_inj, by = c('season','club_code' = 'team','gsis_id','game_type','week')) -> injured_starters
# Number of injuries by position
injured_starters %>%
group_by(season,club_code,week,position) %>%
summarise(starters_injured = n()) %>%
ungroup() %>%
pivot_wider(names_from = position, names_prefix = "injured_",values_from = starters_injured) -> injuries_position
head(injuries_position)
nfl_game_results %>%
inner_join(cum_avgs, by = c('game_id','season','week','home_team' = 'team')) %>%
inner_join(cum_avgs, by = c('game_id','season','week','away_team' = 'team'),suffix = c('_home','_away'))-> w_avgs
# Check for stragglers
nfl_game_results %>%
anti_join(cum_avgs, by = c('game_id','season','home_team' = 'team','week')) %>%
nrow()
# Join previous season's results
#w_avgs %>%
#  left_join(team_win_pct,by = c('season','home_team' = 'team')) %>%
#  left_join(team_win_pct, by = c('away_team' = 'team','season'),suffix = c('_home','_away')) -> matchups
# Indicate whether home team won
w_avgs %>%
mutate(home_win = result > 0) -> matchups
matchups %>%
left_join(injuries_position,by = c('season','home_team'='club_code','week')) %>%
left_join(injuries_position,by = c('season','away_team'='club_code','week'),suffix = c('_home','_away')) %>%
mutate(across(starts_with('injured_'), ~replace_na(.x, 0))) -> matchup_full
matchup_full %>%
select(-c(home_score,away_score,overtime,home_team,away_team,away_qb_name,home_qb_name)) -> matchup_ready
colSums(is.na(matchup_ready))
colnames(matchup_ready[colSums(is.na(matchup_ready)) > 177]) -> columns_to_delete
columns_to_delete
# Hold
trainIndex <- createDataPartition(matchup_full$home_win, p = 0.7, list = FALSE)
train_data <- matchup_full[trainIndex, ]
test_data <- matchup_full[-trainIndex, ] %>%
# Remove first season
filter(season != 2011)
head(train_data)
