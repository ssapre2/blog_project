tidy(imp_models,number = 1)
library('glmnet')
# Penalized Linear Regression
# Mixture = 1 means pure lasso
lr_mod <-
logistic_reg(mixture = 0.05,penalty = 1) %>%
set_engine("glmnet")
# Create folds for cross-validation
folds <- vfold_cv(train_data)
# create a workflow using recipe and model objects
game_pred_wflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(rec_impute)
fit_cv = game_pred_wflow %>%
fit_resamples(folds)
collect_metrics(fit_cv)
fit_cv %>%
show_best(metric = "roc_auc") -> best_fit
fit_cv %>%
show_best(metric = "accuracy")
final_wf = game_pred_wflow %>%
finalize_workflow(best_fit)
final_fit <-
final_wf %>%
last_fit(split = splits)
final_fit %>%
extract_fit_engine() %>%
tidy() %>%
rename(penalty = lambda)
# Use model to make prediction on test data set
predict(fit_cv,new_data = test_data)
final_fit %>%
extract_fit_engine() %>%
tidy() %>%
rename(penalty = lambda)
# Use model to make prediction on test data set
predict(final_fit,new_data = test_data)
final_wf
# Use model to make prediction on test data set
predict(final_wf,new_data = test_data)
final_model = extract_workflow(final_fit)
# Use model to make prediction on test data set
predict(final_model,new_data = test_data)
game_aug = augment(final_model,test_data)
View(game_aug)
# Align predictions to test dataset
predicted_df = augment(final_model,test_data)
predicted_df %>%
select(week,season,home_team,away_team,.pred_TRUE,home_win,home_score,away_score) %>%
arrange(desc(.pred_TRUE))
View(predicted_df)
predicted_df%>%
roc_curve(truth = home_win, .pred_TRUE) %>%
autoplot()
predicted_df%>%
roc_curve(truth = home_win, .pred_1) %>%
autoplot()
predicted_df %>% select(.pred_class,home_win)
# Plot results by week
predicted_df %>%
group_by(week) %>%
summarise(acc = sum(.pred_class== home_win)/n(), n= n()) -> acc_by_week
acc_by_week
acc_by_week %>%
ggplot(aes(x = week, y = acc)) +
geom_col()
game_aug %>%
group_by(season) %>%
summarise(acc = sum(.pred_class== home_win)/n(), n= n()) -> acc_by_season
acc_by_season
acc_by_season %>%
ggplot(aes(x = season, y = acc)) +
geom_col()
acc_by_week
acc_by_week %>%
ggplot(aes(x = week, y = acc)) +
geom_col()
acc_by_season %>%
ggplot(aes(x = season, y = acc)) +
geom_col() +
geom_smooth()
acc_by_week %>%
ggplot(aes(x = week, y = acc)) +
geom_col() +
geom_smooth()
predicted_df%>%
roc_curve(truth = home_win, .pred_0) %>%
autoplot()
predicted_df%>%
roc_curve(truth = home_win, .pred_0)
# Use final model to make prediction on test data set
predict(final_model,new_data = test_data)
# Align predictions to test dataset
predicted_df = augment(final_model,test_data)
predicted_df
predicted_df%>%
roc_curve(truth = home_win, .pred_0) %>%
autoplot()
predicted_df %>% select(.pred_class,home_win)
# Plot results by week
predicted_df %>%
group_by(week) %>%
summarise(acc = sum(.pred_class== home_win)/n(), n= n()) -> acc_by_week
acc_by_week
acc_by_week %>%
ggplot(aes(x = week, y = acc)) +
geom_col() +
geom_smooth()
game_aug %>%
group_by(season) %>%
summarise(acc = sum(.pred_class== home_win)/n(), n= n()) -> acc_by_season
acc_by_season
acc_by_season %>%
ggplot(aes(x = season, y = acc)) +
geom_col()
final_model %>%
class()
final_model
final_model %>%
pull_workflow_fit()
final_model %>%
pull_workflow_fit() %>%
class()
final_model %>%
extract_fit_parsnip() %>%
class()
final_model %>%
extract_fit_parsnip()
final_model %>%
extract_fit_engine()
final_model %>%
extract_preprocessor()
View(test_data)
final_model %>%
extract_preprocessor()
final_model %>%
extract_preprocessor() %>%
class()
final_model %>%
extract_fit_parsnip()
last_rf_mod <-
rand_forest(mtry = 8, min_n = 7, trees = 1000) %>%
set_engine("ranger", importance = "impurity") %>%
set_mode("classification")
class(last_rf_mod)
final_model %>%
extract_fit_parsnip() %>%
class()
final_model %>%
extract_parameter_dials()
final_model %>%
extract_model()
final_model %>%
extract_spec_parsnip()
final_model %>%
extract_spec_parsnip() %>%
class()
final_model %>%
extract_spec_parsnip() -> model_fit
View(model_fit)
final_model %>%
extract_spec_parsnip() -> final_specs
final_specs$method
final_specs$args
final_model$post
final_model$trained
final_model %>%
extract_fit_parsnip() -> final_pars
View(final_fit)
game_pred_wflow %>%
update_model(spec = final_specs)
game_pred_wflow %>%
update_model(spec = final_specs) %>%
last_fit(splits)
# Update workflow object and retrain on full training set
game_pred_wflow %>%
update_model(spec = final_specs) %>%
last_fit(splits) -> final_full_wflow
class(final_full_wflow)
final_full_wflow$.metrics
final_full_wflow$.predictions
View(splits)
roc_auc(predicted_df$.pred_class,predicted_df$home_win)
predicted_df$home_win
predicted_df$.pred_class
predicted_df$home_win
roc_auc(as.numeric(predicted_df$.pred_class),predicted_df$home_win)
roc_auc(as.numeric(predicted_df$.pred_class),as.numeric(predicted_df$home_win))
roc_auc(as.numeric(predicted_df$.pred_class),as.numeric(predicted_df$home_win))
roc_auc(predicted_df$.pred_class,predicted_df$home_win)
roc_auc(predicted_df$.pred_class,predicted_df$home_win)
class(predicted_df$home_win)
class(predicted_df$.pred_class)
class(as.numeric(predicted_df$.pred_class))
class(as.numeric(predicted_df$.home_win))
class(as.numeric(predicted_df$home_win))
class(as.integer(predicted_df$home_win))
roc_auc(class(as.integer(predicted_df$.pred_class)),class(as.integer(predicted_df$home_win)))
roc_auc(as.integer(predicted_df$.pred_class),as.integer(predicted_df$home_win))
as.integer(predicted_df$.pred_class)
as.integer(predicted_df$home_win)
roc_auc(as.integer(predicted_df$.pred_class)-1,as.integer(predicted_df$home_win)-1)
roc_auc(data = predicted_df,truth = home_win)
roc_auc(data = predicted_df$.pred_class,truth = home_win)
roc_auc(data = as.integer(predicted_df$.pred_class),truth = predicted_df$home_win)
predicted_df %>%
roc_curve(truth = home_win) %>%
autoplot()
predicted_df %>%
roc_curve(truth = home_win,.pred_class) %>%
autoplot()
roc_auc(data = as.integer(predicted_df$.pred_class),truth = as.integer(predicted_df$home_win))
roc_auc(data = as.numeric(predicted_df$.pred_class),truth = as.integer(predicted_df$home_win))
roc_auc(data = round(as.numeric(predicted_df$.pred_class)),truth = as.integer(predicted_df$home_win))
roc_auc(data = round(as.numeric(predicted_df$.pred_class),digits = 0),truth = as.integer(predicted_df$home_win))
collect_metrics(fit_cv)
roc_curve(truth = home_win,.pred_class) %>%
autoplot()
# Align predictions to test dataset
predicted_df = augment(final_model,test_data)
predicted_df %>%
mutate(home_win)
# Align predictions to test dataset
predicted_df = augment(final_model,test_data) %>%
mutate(.pred_class = as.numeric(.pred_class))
# Align predictions to test dataset
predicted_df = augment(final_model,test_data) %>%
mutate(.pred_class = as.numeric(.pred_class)-1)
predicted_df %>%
roc_curve(truth = home_win,.pred_class) %>%
autoplot()
roc_auc(data = predicted_df$.pred_class,truth = predicted_df$home_win)
# Align predictions to test dataset
predicted_df = augment(final_model,test_data) %>%
mutate(.pred_class = as.numeric(.pred_class)-1)
roc_auc(data = predicted_df$.pred_class,truth = predicted_df$home_win)
predicted_df %>%
roc_curve(truth = home_win,.pred_class) %>%
autoplot()
final_full_wflow$.metrics
collect_metrics(fit_cv)
#fit_cv %>%
#  show_best(metric = "roc_auc") -> best_fit
##fit_cv %>%
#  show_best(metric = "accuracy")
final_wf = game_pred_wflow %>%
last_fit(splits)
final_model = extract_workflow(final_wf)
final_model %>%
extract_fit_engine() %>%
tidy() %>%
rename(penalty = lambda)
# Use final model to make prediction on test data set
predict(final_model,new_data = test_data)
# Align predictions to test dataset
predicted_df = augment(final_model,test_data)
# Align predictions to test dataset
predicted_df = augment(final_model,test_data)
# Extract model specs
final_model %>%
extract_spec_parsnip() -> final_specs
# Update workflow object and retrain on full training set
game_pred_wflow %>%
update_model(spec = final_specs) %>%
last_fit(splits) -> final_full_wflow
final_full_wflow$.metrics
# Extract model specs
final_model %>%
extract_spec_parsnip() -> final_specs
# Update workflow object and retrain on full training set
game_pred_wflow %>%
update_model(spec = final_specs) %>%
last_fit(splits) -> final_wflow
final_wflow$.metrics
predicted_df %>%
ggplot(aes(x = .pred, y = home_win)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
expand_limits(y = 0)
predicted_df %>%
ggplot(aes(x = .pred_class, y = home_win)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
expand_limits(y = 0)
predicted_df %>%
ggplot(aes(x = .pred_class, y = home_win)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red")
# Update workflow object and retrain on full training set
game_pred_wflow %>%
update_model(spec = final_specs) %>%
fit(data = cbind(training_data))
# Update workflow object and retrain on full training set
game_pred_wflow %>%
update_model(spec = final_specs) %>%
fit(data = cbind(train_data,test_data))
cbind(train_data,test_data)
# Update workflow object and retrain on full training set w/ same parameters
game_pred_wflow %>%
update_model(spec = final_specs) %>%
# Bind test and training data together
fit(data = cbind(train_data,test_data))
# Update workflow object and retrain on full training set w/ same parameters
game_pred_wflow %>%
update_model(spec = final_specs) %>%
# Bind test and training data together
fit(data = cbind(train_data,test_data)) -> final_obj
# Update workflow object and retrain on full training set w/ same parameters
game_pred_wflow %>%
update_model(spec = final_specs) %>%
# Bind test and training data together
fit(data = cbind(train_data,test_data)) %>%
extract_workflow() -> final_obj
# Update workflow object and retrain on full training set w/ same parameters
game_pred_wflow %>%
update_model(spec = final_specs) %>%
# Bind test and training data together
fit(data = cbind(train_data,test_data))-> final_obj
# Update workflow object and retrain on full training set w/ same parameters
game_pred_wflow %>%
update_model(spec = final_specs) %>%
# Bind test and training data together
fit(data = cbind(train_data,test_data))-> final_flow
class(final_flow)
extract_workflow(final_flow)
final_model %>%
save(file = "gamePred_model2024.rda")
# install and load packages
#install.packages("nflreadr")
library('nflreadr')
library('lme4')
library('caret')
library("tidyverse")
library('pROC')
# Scrape schedule Results
load_schedules(seasons = seq(2011,2024)) -> nfl_game_results
head(nfl_game_results)
# Scrape schedule Results
load_schedules(seasons = seq(2011,2024)) -> nfl_game_results
head(nfl_game_results)
nfl_game_results %>%
# Remove the upcoming season
filter(season < 2024) %>%
pivot_longer(cols = c(away_team,home_team),
names_to = "home_away",
values_to = "team") %>%
mutate(team_score = ifelse(home_away == "home_team",yes = home_score,no = away_score),
opp_score = ifelse(home_away == "home_team", away_score,home_score)) %>%  # sort for cumulative avg
arrange(season,week) %>%
select(season,game_id,team,team_score,opp_score,week) -> team_games
team_games %>%
arrange(week) %>%
group_by(season,team) %>%
mutate(cum_score_mean = cummean(team_score),
cum_score_opp = cummean(opp_score),
cum_wins = cumsum(team_score > opp_score),
cum_losses = cumsum(team_score < opp_score),
cum_ties = cumsum(team_score == opp_score),
cum_win_pct = cum_wins / (cum_wins + cum_losses),
cum_win_pct_lag_1 = lag(cum_win_pct,1),
cum_score_lag_1 = lag(cum_score_mean,1),
cum_opp_lag_1 = lag(cum_score_opp,1)
) %>%
# Non-lag variables leak info
select(week,game_id,contains('lag_1')) %>%
ungroup() -> cum_avgs
team_games %>%
arrange(week) %>%
group_by(season,team) %>%
mutate(cum_score_mean = cummean(team_score),
cum_score_opp = cummean(opp_score),
cum_wins = cumsum(team_score > opp_score),
cum_losses = cumsum(team_score < opp_score),
cum_ties = cumsum(team_score == opp_score),
cum_win_pct = cum_wins / (cum_wins + cum_losses),
cum_win_pct_lag_1 = lag(cum_win_pct,1),
cum_score_lag_1 = lag(cum_score_mean,1),
cum_opp_lag_1 = lag(cum_score_opp,1)
) %>%
# Non-lag variables leak info
select(week,game_id,contains('lag_1')) %>%
ungroup() -> cum_avgs
team_games %>%
group_by(season,team) %>%
summarise(wins = sum(team_score > opp_score),
losses = sum(team_score < opp_score),
ties = sum(team_score == opp_score))%>%
ungroup() %>%
arrange(season) %>%
group_by(team) %>%
mutate(win_pct = wins / (wins + losses),
lag1_win_pct = lag(win_pct,1)) %>%
ungroup() -> team_win_pct
dc = load_depth_charts(seq(2011,most_recent_season()))
injuries = load_injuries(seq(2011,most_recent_season()))
injuries %>%
filter(report_status == "Out") -> out_inj
dc %>%
filter(depth_team == 1) -> starters
starters %>%
select(-c(last_name,first_name,position,full_name)) %>%
inner_join(out_inj, by = c('season','club_code' = 'team','gsis_id','game_type','week')) -> injured_starters
# Number of injuries by position
injured_starters %>%
group_by(season,club_code,week,position) %>%
summarise(starters_injured = n()) %>%
ungroup() %>%
pivot_wider(names_from = position, names_prefix = "injured_",values_from = starters_injured) -> injuries_position
head(injuries_position)
nfl_game_results %>%
inner_join(cum_avgs, by = c('game_id','season','week','home_team' = 'team')) %>%
inner_join(cum_avgs, by = c('game_id','season','week','away_team' = 'team'),suffix = c('_home','_away'))-> w_avgs
# Check for stragglers
nfl_game_results %>%
anti_join(cum_avgs, by = c('game_id','season','home_team' = 'team','week')) -> unplayed_games
# Join previous season's results
#w_avgs %>%
#  left_join(team_win_pct,by = c('season','home_team' = 'team')) %>%
#  left_join(team_win_pct, by = c('away_team' = 'team','season'),suffix = c('_home','_away')) -> matchups
# Indicate whether home team won
w_avgs %>%
mutate(home_win = as.numeric(result > 0)) -> matchups
matchups %>%
left_join(injuries_position,by = c('season','home_team'='club_code','week')) %>%
left_join(injuries_position,by = c('season','away_team'='club_code','week'),suffix = c('_home','_away')) %>%
mutate(across(starts_with('injured_'), ~replace_na(.x, 0))) -> matchup_full
matchup_full %>%
select(-c(home_score,away_score,overtime,home_team,away_team,away_qb_name,home_qb_name,referee,stadium,home_coach,away_coach,ftn,espn,old_game_id,gsis,nfl_detail_id,pfr,pff,result)) -> matchup_ready
# Remove columns
matchup_ready = matchup_ready%>%
# Transform outcome into factor variable
select(where(is.numeric),game_id) %>%
mutate(home_win = as.factor(home_win))
# Split Data
#trainIndex <- createDataPartition(matchup_full$home_win, p = 0.7, list = FALSE)
#train_data <- matchup_full[trainIndex, ]
#test_data <- matchup_full[-trainIndex, ] %>%
# Remove first season for now
#  filter(season != 2011)
matchups24 = matchup_ready %>% filter(season == 2024)
splits = matchup_ready %>%
filter(season != 2024) %>%
initial_split(prop = 0.7)
train_data <- training(splits)
test_data  <- testing(splits)
colnames(train_data)
library(naniar)
gg_miss_var(x = train_data,show_pct = T)
library('tidymodels')
rec_impute = recipe(formula = home_win ~ .,
data = train_data) %>%
#create ID role (do not remove) game ID
update_role(game_id, new_role = "ID") %>%
#impute
#step_impute_median(starts_with('cum_'))
step_impute_median(all_numeric_predictors())
# Create recipe to for moneyline model
# Evalate imputation step
tidy(rec_impute, number = 1)
imp_models <- rec_impute %>%
check_missing(all_numeric_predictors()) %>%
prep(training = train_data)
# Check if imputation worked
imp_models %>%
bake(train_data) %>%
is.na() %>%
colSums()
tidy(imp_models,number = 1)
library('glmnet')
# Penalized Linear Regression
# Mixture = 1 means pure lasso
lr_mod <-
logistic_reg(mixture = 0.05,penalty = 1) %>%
set_engine("glmnet")
# Create folds for cross-validation
folds <- vfold_cv(train_data)
# create a workflow using recipe and model objects
game_pred_wflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(rec_impute)
fit_cv = game_pred_wflow %>%
fit_resamples(folds)
collect_metrics(fit_cv)
#fit_cv %>%
#  show_best(metric = "roc_auc") -> best_fit
##fit_cv %>%
#  show_best(metric = "accuracy")
final_wf = game_pred_wflow %>%
last_fit(splits)
#finalize_workflow(best_fit)
# final_fit <-
#   final_wf %>%
#   last_fit(split = splits)
final_model = extract_workflow(final_wf)
final_model %>%
extract_fit_engine() %>%
tidy() %>%
rename(penalty = lambda)
# Align predictions to test dataset
predicted_df = augment(final_model,test_data)
# Extract model specs
final_model %>%
extract_spec_parsnip() -> final_specs
# Update workflow object and retrain on full training set w/ same parameters
game_pred_wflow %>%
update_model(spec = final_specs) %>%
# Bind test and training data together
fit(data = cbind(train_data,test_data))-> final_flow
final_model %>%
save(file = "gamePred_model2024.rda")
