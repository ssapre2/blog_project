{
  "hash": "517c9b453cc811b30c6216d0f2cc0065",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Predicting NFL Game Outcomes with nflfastR\"\nauthor: \"Sameer Sapre\"\ndate: \"2024-06-30\"\ncategories: [news, code, analysis]\nimage: \"nflfastR.png\"\nexecute: \n  warning: false\n  \n---\n\n\n## Intro\n\nHello everyone! Today I want to share a quick tutorial on using `nflreadR` to build a simple game outcome model.\n\nFirst, a quick introduction of `nflreadR` - it's part of the `nflverse` family of packages in R that all easily and efficiently obtaining data from NFL games. In this post, we'll be using its suite of functions to get the data we need to build a predictive model.\n\nFirst, let's load in some important packages. We'll load in the `tidyverse` for data cleaning and manipulation. The `caret` and `lme4` packages for our model-building.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install and load packages\n#install.packages(\"nflreadr\")\nlibrary('nflreadr')\nlibrary('lme4')\nlibrary('caret')\nlibrary(\"tidyverse\")\nlibrary('pROC')\n```\n:::\n\n\n## Load Data\n\nNow that we have the relevant packages loaded, let's get started getting our data together. Starting with game data, we'll pull game results from 2011 - 2021\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Scrape schedule Results\nload_schedules(seasons = seq(2011,2021)) -> nfl_game_results \nhead(nfl_game_results)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 46\n  game_id   season game_type  week gameday weekday gametime away_team away_score\n  <chr>      <int> <chr>     <int> <chr>   <chr>   <chr>    <chr>          <int>\n1 2011_01_…   2011 REG           1 2011-0… Thursd… 20:30    NO                34\n2 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    PIT                7\n3 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    ATL               12\n4 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    CIN               27\n5 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    IND                7\n6 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    TEN               14\n# ℹ 37 more variables: home_team <chr>, home_score <int>, location <chr>,\n#   result <int>, total <int>, overtime <int>, old_game_id <chr>, gsis <int>,\n#   nfl_detail_id <chr>, pfr <chr>, pff <int>, espn <chr>, ftn <int>,\n#   away_rest <int>, home_rest <int>, away_moneyline <int>,\n#   home_moneyline <int>, spread_line <dbl>, away_spread_odds <int>,\n#   home_spread_odds <int>, total_line <dbl>, under_odds <int>,\n#   over_odds <int>, div_game <int>, roof <chr>, surface <chr>, temp <int>, …\n```\n\n\n:::\n:::\n\n\n\nWe've loaded our schedules in with some interesting variables to use in our model. However, it's not quite in the format we need it to be. Ideally, we'd like to feed in 2 games and have the model give us a winner.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnfl_game_results %>%\n  pivot_longer(cols = c(away_team,home_team),\n               names_to = \"home_away\",\n               values_to = \"team\") %>%\n  mutate(team_score = ifelse(home_away == \"home_team\",yes = home_score,no = away_score),\n         opp_score = ifelse(home_away == \"home_team\", away_score,home_score)) %>%  # sort for cumulative avg\n  arrange(season,week) %>%\n  select(season,game_id,team,team_score,opp_score) -> team_games\n```\n:::\n\n\nLet's use `pivot_longer()` to rearrange our dataset and select some simple variables before making the matchup set.\n\n## Feature Engineering\n\nThen, we'll create some features...\n\nFirst, cumulative points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nteam_games %>%\n  group_by(season,team) %>%\n  mutate(cum_score_mean = cummean(team_score),\n          cum_score_opp = cummean(opp_score),\n          cum_wins = cumsum(team_score > opp_score),\n          cum_losses = cumsum(team_score < opp_score),\n          cum_ties = cumsum(team_score == opp_score),\n         cum_win_pct = cum_wins / (cum_wins + cum_losses),\n         cum_win_pct_lag = lag(cum_win_pct,1),\n         cum_score_lag_1 = lag(cum_score_mean,1),\n         cum_opp_lag_1 = lag(cum_score_opp,1)\n         ) %>%\n  ungroup() -> cum_avgs\n```\n:::\n\n\n\nWin percentage.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nteam_games %>%\n  group_by(season,team) %>%\n  summarise(wins = sum(team_score > opp_score),\n            losses = sum(team_score < opp_score),\n            ties = sum(team_score == opp_score))%>%\n  ungroup() %>%\n  arrange(season) %>%\n  group_by(team) %>%\n  mutate(win_pct = wins / (wins + losses),\n         lag1_win_pct = lag(win_pct,1)) %>%\n  ungroup() -> team_win_pct\n```\n:::\n\n\n\n## Joins\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnfl_game_results %>%\n  inner_join(cum_avgs, by = c('game_id','season','home_team' = 'team')) %>%\n  inner_join(cum_avgs, by = c('game_id','season','away_team' = 'team'),suffix = c('_home','_away'))-> w_avgs\n\n# Check for stragglers\nnfl_game_results %>%\n  anti_join(cum_avgs, by = c('game_id','season','home_team' = 'team')) %>%\n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\n# Join previous season's results\nw_avgs %>%\n  left_join(team_win_pct,by = c('season','home_team' = 'team')) %>%\n  left_join(team_win_pct, by = c('away_team' = 'team','season'),suffix = c('_home','_away')) -> matchups\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmatchups %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 78\n  game_id   season game_type  week gameday weekday gametime away_team away_score\n  <chr>      <int> <chr>     <int> <chr>   <chr>   <chr>    <chr>          <int>\n1 2011_01_…   2011 REG           1 2011-0… Thursd… 20:30    NO                34\n2 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    PIT                7\n3 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    ATL               12\n4 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    CIN               27\n5 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    IND                7\n6 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    TEN               14\n# ℹ 69 more variables: home_team <chr>, home_score <int>, location <chr>,\n#   result <int>, total <int>, overtime <int>, old_game_id <chr>, gsis <int>,\n#   nfl_detail_id <chr>, pfr <chr>, pff <int>, espn <chr>, ftn <int>,\n#   away_rest <int>, home_rest <int>, away_moneyline <int>,\n#   home_moneyline <int>, spread_line <dbl>, away_spread_odds <int>,\n#   home_spread_odds <int>, total_line <dbl>, under_odds <int>,\n#   over_odds <int>, div_game <int>, roof <chr>, surface <chr>, temp <int>, …\n```\n\n\n:::\n\n```{.r .cell-code}\n# Indicate whether home team won\nmatchups %>%\n  mutate(home_win = result > 0) -> matchup_results\n```\n:::\n\n\n\n\nAnd ... BOOM! We have a dataset with game matchups and some features to start out.\n\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}