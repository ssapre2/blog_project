{
  "hash": "2e7e641863f2983e8753a80b474ddeec",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Predicting NFL Game Outcomes with nflfastR\"\nauthor: \"Sameer Sapre\"\ndate: \"2024-06-30\"\ncategories: [news, code, analysis]\nimage: \"nflfastR.png\"\nexecute: \n  warning: false\npage-layout: full\n  \n---\n\n\n## Intro\n\nHello everyone! Today I want to share a quick tutorial on using `nflreadR` to build a simple game outcome model.\n\nFirst, a quick introduction of `nflreadR` - it's part of the `nflverse` family of packages in R that all easily and efficiently obtaining data from NFL games. In this post, we'll be using its suite of functions to get the data we need to build a predictive model.\n\nFirst, let's load in some important packages. We'll load in the `tidyverse` for data cleaning and manipulation. The `caret` and `lme4` packages for our model-building.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install and load packages\n#install.packages(\"nflreadr\")\nlibrary('nflreadr')\nlibrary('lme4')\nlibrary('caret')\nlibrary(\"tidyverse\")\nlibrary('pROC')\n```\n:::\n\n\n## Load Data\n\nNow that we have the relevant packages loaded, let's get started getting our data together. Starting with game data, we'll pull game results from 2011 - 2021. Here, we see that we get a schedule where each row (record) represents a game. There's a home and away team, corresponding scores, and more for each game.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Scrape schedule Results\nload_schedules(seasons = seq(2011,2021)) -> nfl_game_results \nhead(nfl_game_results)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 46\n  game_id   season game_type  week gameday weekday gametime away_team away_score\n  <chr>      <int> <chr>     <int> <chr>   <chr>   <chr>    <chr>          <int>\n1 2011_01_…   2011 REG           1 2011-0… Thursd… 20:30    NO                34\n2 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    PIT                7\n3 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    ATL               12\n4 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    CIN               27\n5 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    IND                7\n6 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    TEN               14\n# ℹ 37 more variables: home_team <chr>, home_score <int>, location <chr>,\n#   result <int>, total <int>, overtime <int>, old_game_id <chr>, gsis <int>,\n#   nfl_detail_id <chr>, pfr <chr>, pff <int>, espn <chr>, ftn <int>,\n#   away_rest <int>, home_rest <int>, away_moneyline <int>,\n#   home_moneyline <int>, spread_line <dbl>, away_spread_odds <int>,\n#   home_spread_odds <int>, total_line <dbl>, under_odds <int>,\n#   over_odds <int>, div_game <int>, roof <chr>, surface <chr>, temp <int>, …\n```\n\n\n:::\n:::\n\n\n\nWe've loaded our schedules in with some interesting variables to use in our model. However, it's not quite in the format we need it to be. Ideally, we'd like to feed in 2 games and have the model give us a winner.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnfl_game_results %>%\n  pivot_longer(cols = c(away_team,home_team),\n               names_to = \"home_away\",\n               values_to = \"team\") %>%\n  mutate(team_score = ifelse(home_away == \"home_team\",yes = home_score,no = away_score),\n         opp_score = ifelse(home_away == \"home_team\", away_score,home_score)) %>%  # sort for cumulative avg\n  arrange(season,week) %>%\n  select(season,game_id,team,team_score,opp_score,week) -> team_games\n```\n:::\n\n\nLet's use `pivot_longer()` to rearrange our dataset and select some simple variables before making the matchup set.\n\n## Feature Engineering\n\nOur goal is to be able to predict the outcome of each. To do that, we need to think about what impacts the outcome of a game before teams even take the field. \n\nIn the case of an NFL game it could things like player skill level, how far a team has to travel, injuries, even the food that players ate the night before. Using `nflreadr` we can see that there are tons of features we could see impacting the game such as .....\n\n\nFirst, let's start with what I think could have the biggest impact on ... team strength! \n\nThere are several ways to quantify team strength, some more complex then others, but for this quick tutorial, we will use recent results as a measure of team strength. The results will be in the form of Cumulative points scored/allowed and winning percentage leading up to the game.\n\nThen, we'll create some features...\n\nFirst, cumulative points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nteam_games %>%\n  arrange(week) %>%\n  group_by(season,team) %>%\n  mutate(cum_score_mean = cummean(team_score),\n          cum_score_opp = cummean(opp_score),\n          cum_wins = cumsum(team_score > opp_score),\n          cum_losses = cumsum(team_score < opp_score),\n          cum_ties = cumsum(team_score == opp_score),\n         cum_win_pct = cum_wins / (cum_wins + cum_losses),\n         cum_win_pct_lag_1 = lag(cum_win_pct,1),\n         cum_score_lag_1 = lag(cum_score_mean,1),\n         cum_opp_lag_1 = lag(cum_score_opp,1)\n         ) %>%\n  # Non-lag variables leak info\n  select(week,game_id,contains('lag_1')) %>%\n  ungroup() -> cum_avgs\n```\n:::\n\n\n\nWin percentage.\n\n\n::: {.cell ignore='true'}\n\n```{.r .cell-code}\nteam_games %>%\n  group_by(season,team) %>%\n  summarise(wins = sum(team_score > opp_score),\n            losses = sum(team_score < opp_score),\n            ties = sum(team_score == opp_score))%>%\n  ungroup() %>%\n  arrange(season) %>%\n  group_by(team) %>%\n  mutate(win_pct = wins / (wins + losses),\n         lag1_win_pct = lag(win_pct,1)) %>%\n  ungroup() -> team_win_pct\n```\n:::\n\n\nThis should be a good start, but I still feel like something is missing. If I'm trying to predict who will win the game, I want to see the injury report. I want to know who's actually in the game. Thankfully `nflreadr` provides that info.\n\nFirst, we load in depth charts and injury info because we want to know who will be injured, but also if they play an important role on their team. While it would be helpful to know which Niners RBs are out, it would probably helpful know if it's CMc or not.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndc = load_depth_charts(seq(2011,2021))\ninjuries = load_injuries(seq(2011,2021))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ninjuries %>%\n  filter(report_status == \"Out\") -> out_inj\n\ndc %>% \n  filter(depth_team == 1) -> starters\n\nstarters %>%\n  select(-c(last_name,first_name,position,full_name)) %>%\n  inner_join(out_inj, by = c('season','club_code' = 'team','gsis_id','game_type','week')) -> injured_starters\n\n# Number of injuries by position\ninjured_starters %>%\n  group_by(season,club_code,week,position) %>%\n  summarise(starters_injured = n()) %>%\n  ungroup() %>%\n  pivot_wider(names_from = position, names_prefix = \"injured_\",values_from = starters_injured) -> injuries_position\n\nhead(injuries_position)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 19\n  season club_code  week injured_S injured_LB injured_RB injured_T injured_C\n   <dbl> <chr>     <dbl>     <int>      <int>      <int>     <int>     <int>\n1   2011 ARI           7         1         NA         NA        NA        NA\n2   2011 ARI           8         1         NA         NA        NA        NA\n3   2011 ARI           9        NA          1          1        NA        NA\n4   2011 ARI          10         1          1         NA        NA        NA\n5   2011 ARI          11         1          1         NA        NA        NA\n6   2011 ARI          12         1          1         NA        NA        NA\n# ℹ 11 more variables: injured_DT <int>, injured_WR <int>, injured_CB <int>,\n#   injured_G <int>, injured_K <int>, injured_TE <int>, injured_QB <int>,\n#   injured_DE <int>, injured_LS <int>, injured_P <int>, injured_FB <int>\n```\n\n\n:::\n:::\n\n\nAlright, now we have some flags for injured starter at each position. Coming up, we need to bring all of our new features together.\n\n## Joins\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnfl_game_results %>%\n  inner_join(cum_avgs, by = c('game_id','season','week','home_team' = 'team')) %>%\n  inner_join(cum_avgs, by = c('game_id','season','week','away_team' = 'team'),suffix = c('_home','_away'))-> w_avgs\n\n# Check for stragglers\nnfl_game_results %>%\n  anti_join(cum_avgs, by = c('game_id','season','home_team' = 'team','week')) %>%\n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\n# Join previous season's results\n#w_avgs %>%\n#  left_join(team_win_pct,by = c('season','home_team' = 'team')) %>%\n#  left_join(team_win_pct, by = c('away_team' = 'team','season'),suffix = c('_home','_away')) -> matchups\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Indicate whether home team won\nw_avgs %>%\n  mutate(home_win = result > 0) -> matchups\n```\n:::\n\n\n\nNow, let's bring in our injury data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatchups %>%\n  left_join(injuries_position,by = c('season','home_team'='club_code','week')) %>%\n  left_join(injuries_position,by = c('season','away_team'='club_code','week'),suffix = c('_home','_away')) %>%\n  mutate(across(starts_with('injured_'), ~replace_na(.x, 0))) -> matchup_full\n\nmatchup_full %>%\n  # Transform outcome into factor variable\n  mutate(home_win = as.factor(home_win)) -> matchup_full\n```\n:::\n\n\n\n\nAnd ... BOOM! We have a dataset with game matchups and some features to start out. Feel free to peruse the data to find potential features to include in our Model. \n\n\n# Building the Model\n\nBefore we do any preprocessing, let's split the data.\n\nFirst let's remove columns that might leak info to the model. Remember the model must only use information available prior to kickoff\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatchup_full %>%\n  select(-c(home_score,away_score,overtime,home_team,away_team,away_qb_name,home_qb_name)) -> matchup_ready\n```\n:::\n\n\nNow, let's look for the most model-ready variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolSums(is.na(matchup_ready))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               game_id                 season              game_type \n                     0                      0                      0 \n                  week                gameday                weekday \n                     0                      0                      0 \n              gametime               location                 result \n                     0                      0                      0 \n                 total            old_game_id                   gsis \n                     0                      0                      0 \n         nfl_detail_id                    pfr                    pff \n                  2685                      0                      0 \n                  espn                    ftn              away_rest \n                     0                   2137                      0 \n             home_rest         away_moneyline         home_moneyline \n                     0                      1                      1 \n           spread_line       away_spread_odds       home_spread_odds \n                     0                      1                      1 \n            total_line             under_odds              over_odds \n                     0                      1                      1 \n              div_game                   roof                surface \n                     0                      0                      0 \n                  temp                   wind             away_qb_id \n                   822                    822                      0 \n            home_qb_id             away_coach             home_coach \n                     0                      0                      0 \n               referee             stadium_id                stadium \n                     1                      0                      0 \ncum_win_pct_lag_1_home   cum_score_lag_1_home     cum_opp_lag_1_home \n                   178                    176                    176 \ncum_win_pct_lag_1_away   cum_score_lag_1_away     cum_opp_lag_1_away \n                   178                    176                    176 \n              home_win         injured_S_home        injured_LB_home \n                     0                      0                      0 \n       injured_RB_home         injured_T_home         injured_C_home \n                     0                      0                      0 \n       injured_DT_home        injured_WR_home        injured_CB_home \n                     0                      0                      0 \n        injured_G_home         injured_K_home        injured_TE_home \n                     0                      0                      0 \n       injured_QB_home        injured_DE_home        injured_LS_home \n                     0                      0                      0 \n        injured_P_home        injured_FB_home         injured_S_away \n                     0                      0                      0 \n       injured_LB_away        injured_RB_away         injured_T_away \n                     0                      0                      0 \n        injured_C_away        injured_DT_away        injured_WR_away \n                     0                      0                      0 \n       injured_CB_away         injured_G_away         injured_K_away \n                     0                      0                      0 \n       injured_TE_away        injured_QB_away        injured_DE_away \n                     0                      0                      0 \n       injured_LS_away         injured_P_away        injured_FB_away \n                     0                      0                      0 \n```\n\n\n:::\n:::\n\n\nLooks like there are a few varibles with several na's. Though we'd like to keep the \"lag\" columns that we created. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(matchup_ready[colSums(is.na(matchup_ready)) > 178]) -> columns_to_delete\ncolumns_to_delete\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"nfl_detail_id\" \"ftn\"           \"temp\"          \"wind\"         \n```\n\n\n:::\n\n```{.r .cell-code}\n# Remove columns\nmatchup_ready = matchup_ready%>%\n  # Transform outcome into factor variable\n  mutate(home_win = as.factor(home_win)) %>%\n  select(-c(columns_to_delete)) \n```\n:::\n\n\nWhat about other NAs? There are still some left. For the purpose of this exercise, let's remove them with na.omit(). This is a bad idea as it leaves potentially useful data on the table.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Split Data\ntrainIndex <- createDataPartition(matchup_full$home_win, p = 0.7, list = FALSE)\ntrain_data <- matchup_full[trainIndex, ]\ntest_data <- matchup_full[-trainIndex, ] %>%\n  # Remove first season for now\n  filter(season != 2011)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncolSums(is.na(train_data))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               game_id                 season              game_type \n                     0                      0                      0 \n                  week                gameday                weekday \n                     0                      0                      0 \n              gametime              away_team             away_score \n                     0                      0                      0 \n             home_team             home_score               location \n                     0                      0                      0 \n                result                  total               overtime \n                     0                      0                      0 \n           old_game_id                   gsis          nfl_detail_id \n                     0                      0                   1877 \n                   pfr                    pff                   espn \n                     0                      0                      0 \n                   ftn              away_rest              home_rest \n                  1489                      0                      0 \n        away_moneyline         home_moneyline            spread_line \n                     1                      1                      0 \n      away_spread_odds       home_spread_odds             total_line \n                     1                      1                      0 \n            under_odds              over_odds               div_game \n                     1                      1                      0 \n                  roof                surface                   temp \n                     0                      0                    591 \n                  wind             away_qb_id             home_qb_id \n                   591                      0                      0 \n          away_qb_name           home_qb_name             away_coach \n                     0                      0                      0 \n            home_coach                referee             stadium_id \n                     0                      1                      0 \n               stadium cum_win_pct_lag_1_home   cum_score_lag_1_home \n                     0                    134                    132 \n    cum_opp_lag_1_home cum_win_pct_lag_1_away   cum_score_lag_1_away \n                   132                    133                    132 \n    cum_opp_lag_1_away               home_win         injured_S_home \n                   132                      0                      0 \n       injured_LB_home        injured_RB_home         injured_T_home \n                     0                      0                      0 \n        injured_C_home        injured_DT_home        injured_WR_home \n                     0                      0                      0 \n       injured_CB_home         injured_G_home         injured_K_home \n                     0                      0                      0 \n       injured_TE_home        injured_QB_home        injured_DE_home \n                     0                      0                      0 \n       injured_LS_home         injured_P_home        injured_FB_home \n                     0                      0                      0 \n        injured_S_away        injured_LB_away        injured_RB_away \n                     0                      0                      0 \n        injured_T_away         injured_C_away        injured_DT_away \n                     0                      0                      0 \n       injured_WR_away        injured_CB_away         injured_G_away \n                     0                      0                      0 \n        injured_K_away        injured_TE_away        injured_QB_away \n                     0                      0                      0 \n       injured_DE_away        injured_LS_away         injured_P_away \n                     0                      0                      0 \n       injured_FB_away \n                     0 \n```\n\n\n:::\n:::\n\n\nAlright, now that we have our training data ready, let's leverage the power of `tidymodels` to continue our preprocessing. I'm sure, you noticed quite a few variables still containing missing values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary('tidymodels')\n\nrec_impute = recipe(formula = home_win ~\n                      game_id +\n                      cum_score_lag_1_home +\n                 cum_opp_lag_1_home + cum_score_lag_1_away +\n                 cum_opp_lag_1_away + \n                 cum_win_pct_lag_1_home +\n                 cum_win_pct_lag_1_away,\n                 data = train_data) %>%\n  #create ID role (do not remove) game ID\n  update_role(game_id, new_role = \"ID\") %>%\n  #impute\n  step_impute_median(starts_with('cum_'))\n\n# Create recipe to for moneyline model\n\n# Evalate imputation step\ntidy(rec_impute, number = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  terms                   value id                 \n  <chr>                   <dbl> <chr>              \n1 \"starts_with(\\\"cum_\\\")\"    NA impute_median_sD7Dl\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nimp_models <- prep(rec_impute, training = train_data)\n\ntidy(imp_models,number = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  terms                  value id                 \n  <chr>                  <dbl> <chr>              \n1 cum_score_lag_1_home    23   impute_median_sD7Dl\n2 cum_opp_lag_1_home      22.9 impute_median_sD7Dl\n3 cum_score_lag_1_away    23.4 impute_median_sD7Dl\n4 cum_opp_lag_1_away      23   impute_median_sD7Dl\n5 cum_win_pct_lag_1_home   0.5 impute_median_sD7Dl\n6 cum_win_pct_lag_1_away   0.5 impute_median_sD7Dl\n```\n\n\n:::\n:::\n\n\n\n\n## Modeling \n\nAhh finally, now we can get to the actual model building.... which we'll do in about 3 lines of code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Penalized Linear Regression\n# Mixture = 1 means pure lasso\nlr_mod <- \n  logistic_reg() %>% \n  set_engine(\"glm\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create folds for cross-validation\nfolds <- vfold_cv(train_data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a workflow using recipe and model objects\ngame_pred_wflow <- \n  workflow() %>% \n  add_model(lr_mod) %>% \n  add_recipe(rec_impute)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary('glmnet')\n\nprep(rec_impute,training = train_data)\n\ngame_fit <- \n  game_pred_wflow %>% \n  fit(data = train_data)\n\nfit_cv = game_pred_wflow %>%\n  fit_resamples(folds)\n```\n:::\n\n\nCheck model fit object and coefficient estimates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nextract_fit_parsnip(game_fit) %>%\n  tidy() -> lr_fit\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_metrics(fit_cv)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 6\n  .metric     .estimator  mean     n std_err .config             \n  <chr>       <chr>      <dbl> <int>   <dbl> <chr>               \n1 accuracy    binary     0.627    10 0.0174  Preprocessor1_Model1\n2 brier_class binary     0.229    10 0.00507 Preprocessor1_Model1\n3 roc_auc     binary     0.668    10 0.0186  Preprocessor1_Model1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use model to make prediction on test data set\npredict(game_fit,new_data = test_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 800 × 1\n   .pred_class\n   <fct>      \n 1 TRUE       \n 2 TRUE       \n 3 TRUE       \n 4 FALSE      \n 5 FALSE      \n 6 FALSE      \n 7 TRUE       \n 8 TRUE       \n 9 FALSE      \n10 TRUE       \n# ℹ 790 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\ngame_aug = augment(game_fit,test_data)\n\ngame_aug %>%\n  select(week,season,home_team,away_team,.pred_TRUE,home_win,home_score,away_score) %>%\n  arrange(desc(.pred_TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 800 × 8\n    week season home_team away_team .pred_TRUE home_win home_score away_score\n   <dbl>  <dbl> <chr>     <chr>          <dbl> <fct>         <int>      <int>\n 1     2   2018 LA        ARI            0.936 TRUE             34          0\n 2     6   2013 DEN       JAX            0.918 TRUE             35         19\n 3     2   2017 JAX       TEN            0.889 FALSE            16         37\n 4     2   2014 MIN       NE             0.888 FALSE             7         30\n 5     2   2021 SEA       TEN            0.886 FALSE            30         33\n 6     2   2014 DEN       KC             0.879 TRUE             24         17\n 7     8   2020 KC        NYJ            0.867 TRUE             35          9\n 8     2   2019 TEN       IND            0.864 FALSE            17         19\n 9     2   2020 PIT       DEN            0.849 TRUE             26         21\n10     4   2012 ATL       CAR            0.842 TRUE             30         28\n# ℹ 790 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngame_aug %>% \n  roc_curve(truth = home_win, .pred_TRUE) %>% \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n\n```{.r .cell-code}\ngame_aug %>% select(.pred_class,home_win)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 800 × 2\n   .pred_class home_win\n   <fct>       <fct>   \n 1 TRUE        FALSE   \n 2 TRUE        TRUE    \n 3 TRUE        FALSE   \n 4 FALSE       TRUE    \n 5 FALSE       TRUE    \n 6 FALSE       FALSE   \n 7 TRUE        FALSE   \n 8 TRUE        FALSE   \n 9 FALSE       FALSE   \n10 TRUE        TRUE    \n# ℹ 790 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# Plot results by week\ngame_aug %>%\n  group_by(week) %>%\n  summarise(acc = sum(.pred_class== home_win)/n(), n= n()) -> acc_by_week\n\nacc_by_week\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 22 × 3\n    week   acc     n\n   <dbl> <dbl> <int>\n 1     1 0.488    41\n 2     2 0.524    42\n 3     3 0.511    45\n 4     4 0.568    44\n 5     5 0.578    45\n 6     6 0.608    51\n 7     7 0.644    45\n 8     8 0.718    39\n 9     9 0.610    41\n10    10 0.537    41\n# ℹ 12 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nacc_by_week %>%\n  ggplot(aes(x = week, y = acc)) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-2.png){width=672}\n:::\n\n```{.r .cell-code}\ngame_aug %>%\n  group_by(season) %>%\n  summarise(acc = sum(.pred_class== home_win)/n(), n= n()) -> acc_by_season\n\nacc_by_season\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 3\n   season   acc     n\n    <dbl> <dbl> <int>\n 1   2012 0.5      72\n 2   2013 0.494    83\n 3   2014 0.580    88\n 4   2015 0.614    70\n 5   2016 0.643    84\n 6   2017 0.649    77\n 7   2018 0.609    87\n 8   2019 0.653    75\n 9   2020 0.662    80\n10   2021 0.595    84\n```\n\n\n:::\n\n```{.r .cell-code}\nacc_by_season %>%\n  ggplot(aes(x = season, y = acc)) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-3.png){width=672}\n:::\n:::\n\n\nLooks like predictions get slightly stronger throughout season. Sample size is small for end of season.\n\nOoof! this is a terrible fit. Let's check the model fit.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngame_aug %>% \n  roc_auc(truth = home_win, .pred_TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.383\n```\n\n\n:::\n:::\n\n\nLet's create a new model recipe to check how other models do\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec_moneyline = recipe(formula = home_win ~\n                      game_id +home_moneyline,\n                 data = train_data) %>%\n  #create ID role (do not remove) game ID\n  update_role(game_id, new_role = \"ID\")\n\n# Update workflow\ngame_pred_wflow %>%\n  update_recipe(rec_moneyline) -> ml_flow\n\nprep(rec_moneyline,training = train_data)\n\nml_fit <- \n  ml_flow %>% \n  fit(data = train_data)\n\nextract_fit_parsnip(ml_fit) %>%\n  tidy() \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 5\n  term           estimate std.error statistic  p.value\n  <chr>             <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)    -0.0982   0.0511       -1.92 5.44e- 2\n2 home_moneyline -0.00318  0.000202    -15.8  4.87e-56\n```\n\n\n:::\n\n```{.r .cell-code}\n# Make predictions\npredict(ml_fit,new_data = test_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 800 × 1\n   .pred_class\n   <fct>      \n 1 FALSE      \n 2 FALSE      \n 3 TRUE       \n 4 TRUE       \n 5 FALSE      \n 6 FALSE      \n 7 TRUE       \n 8 TRUE       \n 9 FALSE      \n10 TRUE       \n# ℹ 790 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# Augment dataframe with preds\nml_aug = augment(ml_fit,test_data)\n\n# Plot ROC\nml_aug %>% \n  roc_curve(truth = home_win, .pred_TRUE) %>% \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n\n```{.r .cell-code}\nml_aug %>% \n  roc_auc(truth = home_win, .pred_TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.308\n```\n\n\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}