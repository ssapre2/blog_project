{
  "hash": "3df1ff28380e5991e3282351b5ad7a2c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Predicting NFL Game Outcomes with nflfastR\"\nauthor: \"Sameer Sapre\"\ndate: \"2024-06-30\"\ncategories: [news, code, analysis] \nimage: \"nflfastR.png\"\nexecute: \n  warning: false\npage-layout: full\n  \n---\n\n\n## Intro\n\nHello everyone! Today I want to share a tutorial on using `nflreadR` to read historic NFL results and model game outcomes with `tidymodels`.\n\nFirst, a quick introduction of the R packages we'll use. `nflreadR` is a part of the `nflverse` family of packages that easily and efficiently obtain data from NFL games. This includes past games results and statistics. In this post, we'll be using its suite of functions to get the data we need to build a simple predictive model. We'll also use the `tidymodels` package to setup our model and `tidyverse` for data cleaning and manipulation. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install and load packages\n#install.packages(\"nflreadr\")\nlibrary('nflreadr')\nlibrary(\"tidyverse\")\nlibrary('pROC')\nlibrary('tidymodels')\n```\n:::\n\n\n## Load Data\n\nNow that we have the relevant packages loaded, let's get started getting our data together. Starting with game data, we'll pull game results from 2011 - 2021. Here, we see that we get a schedule where each row (record) represents a game. There's a home and away team, corresponding scores, and more contextual information for each game.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Scrape schedule Results\nload_schedules(seasons = seq(2011,2024)) -> nfl_game_results \nhead(nfl_game_results)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 46\n  game_id   season game_type  week gameday weekday gametime away_team away_score\n  <chr>      <int> <chr>     <int> <chr>   <chr>   <chr>    <chr>          <int>\n1 2011_01_…   2011 REG           1 2011-0… Thursd… 20:30    NO                34\n2 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    PIT                7\n3 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    ATL               12\n4 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    CIN               27\n5 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    IND                7\n6 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    TEN               14\n# ℹ 37 more variables: home_team <chr>, home_score <int>, location <chr>,\n#   result <int>, total <int>, overtime <int>, old_game_id <chr>, gsis <int>,\n#   nfl_detail_id <chr>, pfr <chr>, pff <int>, espn <chr>, ftn <int>,\n#   away_rest <int>, home_rest <int>, away_moneyline <int>,\n#   home_moneyline <int>, spread_line <dbl>, away_spread_odds <int>,\n#   home_spread_odds <int>, total_line <dbl>, under_odds <int>,\n#   over_odds <int>, div_game <int>, roof <chr>, surface <chr>, temp <int>, …\n```\n\n\n:::\n:::\n\n\n\nWe've loaded our schedules in with some interesting variables to use in our model. However, it's not quite in the format we need it to be. Ideally, we'd like to feed in 2 teams and have the model give us a winner.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnfl_game_results %>%\n  # Remove the upcoming season\n  filter(season < 2024) %>%\n  pivot_longer(cols = c(away_team,home_team),\n               names_to = \"home_away\",\n               values_to = \"team\") %>%\n  mutate(team_score = ifelse(home_away == \"home_team\",yes = home_score,no = away_score),\n         opp_score = ifelse(home_away == \"home_team\", away_score,home_score)) %>%  # sort for cumulative avg\n  arrange(season,week) %>%\n  select(season,game_id,team,team_score,opp_score,week) -> team_games\n```\n:::\n\n\nLet's use `pivot_longer()` to rearrange our dataset and select some simple variables before making the matchup set.\n\n## Feature Engineering\n\nOur goal is to be able to predict the outcome of each. To do that, we need to think about what impacts the outcome of a game before teams even take the field. \n\nIn the case of an NFL game it could be things like player skill level, how far a team has to travel, injuries, even the food that players ate the night before. Using `nflreadr` we can see that there are several variables that can potentially impact the game's outcome from injuries to previous results.\n\n\nWe'll start off by pulling in previous_results. By using previous results, we can hopefully capture a team's quality as a predictor for how they will perform in the next game. There are several ways to quantify team strength, some more complex than others, but for this tutorial, we will use cumulative results as a measure of team strength. The results will be in the form of cumulative points scored/allowed and winning percentage leading up to the game.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nteam_games %>%\n  arrange(week) %>%\n  group_by(season,team) %>%\n  # For each team's season calculate the cumulative scores for after each week\n  mutate(cumul_score_mean = cummean(team_score),\n          cumul_score_opp = cummean(opp_score),\n          cumul_wins = cumsum(team_score > opp_score),\n          cumul_losses = cumsum(team_score < opp_score),\n          cumul_ties = cumsum(team_score == opp_score),\n         cumul_win_pct = cumul_wins / (cumul_wins + cumul_losses),\n         # Create the lag variable\n         cumul_win_pct_lag_1 = lag(cumul_win_pct,1),\n         cumul_score_lag_1 = lag(cumul_score_mean,1),\n         cumul_opp_lag_1 = lag(cumul_score_opp,1)\n         ) %>%\n  # Non-lag variables leak info\n  select(week,game_id,contains('lag_1')) %>%\n  ungroup() -> cumul_avgs\n```\n:::\n\n\n\nLet's also calculate winning percentage as a feature.\n\n\n::: {.cell ignore='true'}\n\n```{.r .cell-code}\nteam_games %>%\n  group_by(season,team) %>%\n  summarise(wins = sum(team_score > opp_score),\n            losses = sum(team_score < opp_score),\n            ties = sum(team_score == opp_score))%>%\n  ungroup() %>%\n  arrange(season) %>%\n  group_by(team) %>%\n  mutate(win_pct = wins / (wins + losses),\n         lag1_win_pct = lag(win_pct,1)) %>%\n  ungroup() -> team_win_pct\n```\n:::\n\n\nThis should be a good start, but I still feel like something is missing. Football is a dangerous game and players regularly get injured. Thankfully `nflreadr` provides weekly injury reports. Let's try incorporating that into our model.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load depth charts and injury reports\ndc = load_depth_charts(seq(2011,most_recent_season()))\ninjuries = load_injuries(seq(2011,most_recent_season()))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ninjuries %>%\n  filter(report_status == \"Out\") -> out_inj\n\ndc %>% \n  filter(depth_team == 1) -> starters\n\n# Determine roster position of injured players\nstarters %>%\n  select(-c(last_name,first_name,position,full_name)) %>%\n  inner_join(out_inj, by = c('season','club_code' = 'team','gsis_id','game_type','week')) -> injured_starters\n\n# Number of injuries by position\ninjured_starters %>%\n  group_by(season,club_code,week,position) %>%\n  summarise(starters_injured = n()) %>%\n  ungroup() %>%\n  pivot_wider(names_from = position, names_prefix = \"injured_\",values_from = starters_injured) -> injuries_position\n\nhead(injuries_position)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 19\n  season club_code  week injured_S injured_LB injured_RB injured_T injured_C\n   <dbl> <chr>     <dbl>     <int>      <int>      <int>     <int>     <int>\n1   2011 ARI           7         1         NA         NA        NA        NA\n2   2011 ARI           8         1         NA         NA        NA        NA\n3   2011 ARI           9        NA          1          1        NA        NA\n4   2011 ARI          10         1          1         NA        NA        NA\n5   2011 ARI          11         1          1         NA        NA        NA\n6   2011 ARI          12         1          1         NA        NA        NA\n# ℹ 11 more variables: injured_DT <int>, injured_WR <int>, injured_CB <int>,\n#   injured_G <int>, injured_K <int>, injured_TE <int>, injured_QB <int>,\n#   injured_DE <int>, injured_LS <int>, injured_P <int>, injured_FB <int>\n```\n\n\n:::\n:::\n\n\nAlright, now we have some flags for injured starter at each position. Next, we need to bring all of our new features together.\n\n## Joins\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnfl_game_results %>%\n  inner_join(cumul_avgs, by = c('game_id','season','week','home_team' = 'team')) %>%\n  inner_join(cumul_avgs, by = c('game_id','season','week','away_team' = 'team'),suffix = c('_home','_away'))-> w_avgs\n\n# Check for stragglers\nnfl_game_results %>%\n  anti_join(cumul_avgs, by = c('game_id','season','home_team' = 'team','week')) -> unplayed_games\n\n# Join previous season's results\n#w_avgs %>%\n#  left_join(team_win_pct,by = c('season','home_team' = 'team')) %>%\n#  left_join(team_win_pct, by = c('away_team' = 'team','season'),suffix = c('_home','_away')) -> matchups\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Indicate whether home team won\nw_avgs %>%\n  mutate(home_win = as.numeric(result > 0)) -> matchups\n```\n:::\n\n\n\nNow, let's bring in our injury data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatchups %>%\n  left_join(injuries_position,by = c('season','home_team'='club_code','week')) %>%\n  left_join(injuries_position,by = c('season','away_team'='club_code','week'),suffix = c('_home','_away')) %>%\n  mutate(across(starts_with('injured_'), ~replace_na(.x, 0))) -> matchup_full\n```\n:::\n\n\n\n\nAnd ... BOOM! We have a dataset with game-by-game matchups and some features to start out. Feel free to peruse the data to find potential features to include in our Model. \n\n\n# Building the Model\n\nBefore we do any preprocessing, let's split the data.\n\nFirst, let's remove columns that might leak info to the model. Remember the model must only use information available prior to kickoff.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatchup_full %>%\n  select(-c(home_score,away_score,overtime,home_team,away_team,away_qb_name,home_qb_name,referee,stadium,home_coach,away_coach,ftn,espn,old_game_id,gsis,nfl_detail_id,pfr,pff,result)) -> matchup_ready\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Remove columns\nmatchup_ready = matchup_ready%>%\n  # Transform outcome into factor variable\n  select(where(is.numeric),game_id) %>% \n  mutate(home_win = as.factor(home_win)) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Split Data\n\nmatchups24 = matchup_ready %>% filter(season == 2024)\nsplits = matchup_ready %>% \n  filter(season != 2024) %>%\n  initial_split(prop = 0.7)\ntrain_data <- training(splits)\ntest_data  <- testing(splits)\n```\n:::\n\n\n\nLet's checkout the variables avaialable to us.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(train_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"season\"                   \"week\"                    \n [3] \"total\"                    \"away_rest\"               \n [5] \"home_rest\"                \"away_moneyline\"          \n [7] \"home_moneyline\"           \"spread_line\"             \n [9] \"away_spread_odds\"         \"home_spread_odds\"        \n[11] \"total_line\"               \"under_odds\"              \n[13] \"over_odds\"                \"div_game\"                \n[15] \"temp\"                     \"wind\"                    \n[17] \"cumul_win_pct_lag_1_home\" \"cumul_score_lag_1_home\"  \n[19] \"cumul_opp_lag_1_home\"     \"cumul_win_pct_lag_1_away\"\n[21] \"cumul_score_lag_1_away\"   \"cumul_opp_lag_1_away\"    \n[23] \"home_win\"                 \"injured_S_home\"          \n[25] \"injured_LB_home\"          \"injured_RB_home\"         \n[27] \"injured_T_home\"           \"injured_C_home\"          \n[29] \"injured_DT_home\"          \"injured_WR_home\"         \n[31] \"injured_CB_home\"          \"injured_G_home\"          \n[33] \"injured_K_home\"           \"injured_TE_home\"         \n[35] \"injured_QB_home\"          \"injured_DE_home\"         \n[37] \"injured_LS_home\"          \"injured_P_home\"          \n[39] \"injured_FB_home\"          \"injured_S_away\"          \n[41] \"injured_LB_away\"          \"injured_RB_away\"         \n[43] \"injured_T_away\"           \"injured_C_away\"          \n[45] \"injured_DT_away\"          \"injured_WR_away\"         \n[47] \"injured_CB_away\"          \"injured_G_away\"          \n[49] \"injured_K_away\"           \"injured_TE_away\"         \n[51] \"injured_QB_away\"          \"injured_DE_away\"         \n[53] \"injured_LS_away\"          \"injured_P_away\"          \n[55] \"injured_FB_away\"          \"game_id\"                 \n```\n\n\n:::\n:::\n\n\nOff the bat we see a lot of variables that we created. Do we really need that many variables tracking injured players? Probably not, but we'll let the model handle this issue later on.\n\nWhat about NAs? You may have noticed quite a few variables still containing missing values. We can turn to the package `naniar` to investigate the missingness.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(naniar)\n\ngg_miss_var(x = train_data,show_pct = T)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nIt looks like our custom variables have some missingess as well as some wind and temperature variables. There are several ways to deal with this. However, we will use a simple imputation method as provided by `tidymodels`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary('tidymodels')\n\nrec_impute = recipe(formula = home_win ~ .,\n                 data = train_data) %>%\n  #create ID role (do not remove) game ID. We'll use this to match predictions to specific games\n  update_role(game_id, new_role = \"ID\") %>%\n  #for each numeric variable/feature, replace any NA's with the median value of that variable/feature\n  step_impute_median(all_numeric_predictors())\n\n# Create recipe to for moneyline model\n\n# Evalate imputation step\ntidy(rec_impute, number = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  terms                    value id                 \n  <chr>                    <dbl> <chr>              \n1 all_numeric_predictors()    NA impute_median_Kym7R\n```\n\n\n:::\n:::\n\n\nHere, we can see what the medians (NA-filler) values for each predictor.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimp_models <- rec_impute %>%\n  check_missing(all_numeric_predictors()) %>%\n  prep(training = train_data)\n\n# Check if imputation worked\nimp_models %>%\n  bake(train_data) %>%\n  is.na() %>%\n  colSums()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                  season                     week                    total \n                       0                        0                        0 \n               away_rest                home_rest           away_moneyline \n                       0                        0                        0 \n          home_moneyline              spread_line         away_spread_odds \n                       0                        0                        0 \n        home_spread_odds               total_line               under_odds \n                       0                        0                        0 \n               over_odds                 div_game                     temp \n                       0                        0                        0 \n                    wind cumul_win_pct_lag_1_home   cumul_score_lag_1_home \n                       0                        0                        0 \n    cumul_opp_lag_1_home cumul_win_pct_lag_1_away   cumul_score_lag_1_away \n                       0                        0                        0 \n    cumul_opp_lag_1_away           injured_S_home          injured_LB_home \n                       0                        0                        0 \n         injured_RB_home           injured_T_home           injured_C_home \n                       0                        0                        0 \n         injured_DT_home          injured_WR_home          injured_CB_home \n                       0                        0                        0 \n          injured_G_home           injured_K_home          injured_TE_home \n                       0                        0                        0 \n         injured_QB_home          injured_DE_home          injured_LS_home \n                       0                        0                        0 \n          injured_P_home          injured_FB_home           injured_S_away \n                       0                        0                        0 \n         injured_LB_away          injured_RB_away           injured_T_away \n                       0                        0                        0 \n          injured_C_away          injured_DT_away          injured_WR_away \n                       0                        0                        0 \n         injured_CB_away           injured_G_away           injured_K_away \n                       0                        0                        0 \n         injured_TE_away          injured_QB_away          injured_DE_away \n                       0                        0                        0 \n         injured_LS_away           injured_P_away          injured_FB_away \n                       0                        0                        0 \n                 game_id                 home_win \n                       0                        0 \n```\n\n\n:::\n\n```{.r .cell-code}\ntidy(imp_models,number = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 54 × 3\n   terms            value id                 \n   <chr>            <dbl> <chr>              \n 1 season            2017 impute_median_Kym7R\n 2 week                10 impute_median_Kym7R\n 3 total               44 impute_median_Kym7R\n 4 away_rest            7 impute_median_Kym7R\n 5 home_rest            7 impute_median_Kym7R\n 6 away_moneyline     135 impute_median_Kym7R\n 7 home_moneyline    -150 impute_median_Kym7R\n 8 spread_line          3 impute_median_Kym7R\n 9 away_spread_odds  -105 impute_median_Kym7R\n10 home_spread_odds  -105 impute_median_Kym7R\n# ℹ 44 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Modeling \n\nAhh finally, now we can get to the actual model building.... which we'll do in about 3 lines of code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary('glmnet')\n# Penalized Linear Regression\n# Mixture = 1 means pure lasso\nlr_mod <- \n  logistic_reg(mixture = 0.05,penalty = 1) %>% \n  set_engine(\"glmnet\")\n```\n:::\n\n\nAnd that's it! We'll start off with a basic logistic regression. There are a few tunable (though we won't be tuning in this post) parameters, but we'll manually set them for this exercise.\n\nNext, we want to train our model with cross-validation, so that we can train and test against different samples to avoid an overfit model as much as we can. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create folds for cross-validation\nfolds <- vfold_cv(train_data)\n```\n:::\n\n\nThe `tidymodels` workflow helps organize the steps of the model creation and consolidate model objects. We won't go into details of workflows in this post, but there is plenty of online documentation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a workflow using recipe and model objects\ngame_pred_wflow <- \n  workflow() %>% \n  add_model(lr_mod) %>% \n  add_recipe(rec_impute)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_cv = game_pred_wflow %>%\n  fit_resamples(folds)\n```\n:::\n\n\nCheck for best model fit. It looks like using ROC-AUC and accuracy agree that the first model is the best.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_metrics(fit_cv)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 6\n  .metric     .estimator  mean     n std_err .config             \n  <chr>       <chr>      <dbl> <int>   <dbl> <chr>               \n1 accuracy    binary     0.629    10 0.00854 Preprocessor1_Model1\n2 brier_class binary     0.228    10 0.00108 Preprocessor1_Model1\n3 roc_auc     binary     0.725    10 0.0122  Preprocessor1_Model1\n```\n\n\n:::\n:::\n\n\n\nExtract best model fit.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_wf = game_pred_wflow %>%\n  last_fit(splits)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_model = extract_workflow(final_wf)\n```\n:::\n\n\n\nGet variable estimates and penalty terms.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_model %>%\n  extract_fit_engine() %>%\n  tidy() %>%\n  rename(penalty = lambda)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,596 × 5\n   term         step estimate penalty dev.ratio\n   <chr>       <dbl>    <dbl>   <dbl>     <dbl>\n 1 (Intercept)     1    0.239    3.85 -2.07e-14\n 2 (Intercept)     2    0.237    3.51  1.74e- 3\n 3 (Intercept)     3    0.234    3.20  4.75e- 3\n 4 (Intercept)     4    0.229    2.91  8.26e- 3\n 5 (Intercept)     5    0.225    2.66  1.19e- 2\n 6 (Intercept)     6    0.220    2.42  1.57e- 2\n 7 (Intercept)     7    0.215    2.20  1.95e- 2\n 8 (Intercept)     8    0.210    2.01  2.35e- 2\n 9 (Intercept)     9    0.205    1.83  2.75e- 2\n10 (Intercept)    10    0.199    1.67  3.16e- 2\n# ℹ 3,586 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Align predictions to test dataset\npredicted_df = augment(final_model,test_data) \n```\n:::\n\n\nNow, so we get a sample boost, let's retrain the model on the full training sample.\n\n\n::: {.cell hide='true'}\n\n```{.r .cell-code}\n# Extract model specs\nfinal_model %>%\n  extract_spec_parsnip() -> final_specs\n\n# Update workflow object and retrain on full training set w/ same parameters\ngame_pred_wflow %>%\n  update_model(spec = final_specs) %>%\n  # Bind test and training data together\n  fit(data = cbind(train_data,test_data))-> final_flow\n```\n:::\n\n\n\n\nLet's now save the model for future use and investigation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_model %>%\n  save(file = \"gamePred_model2024.rda\")\n```\n:::\n\n\n\n\nWe'll use this model to make predictions on future games and evaluate how our model performs in real-time.\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}