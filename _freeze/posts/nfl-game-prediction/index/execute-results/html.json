{
  "hash": "e81c212b48f5e31ab8fdff3d9fa0d87b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Predicting NFL Game Outcomes with nflfastR\"\nauthor: \"Sameer Sapre\"\ndate: \"2024-06-30\"\ncategories: [news, code, analysis]\nimage: \"nflfastR.png\"\nexecute: \n  warning: false\n  \n---\n\n\n## Intro\n\nHello everyone! Today I want to share a quick tutorial on using `nflreadR` to build a simple game outcome model.\n\nFirst, a quick introduction of `nflreadR` - it's part of the `nflverse` family of packages in R that all easily and efficiently obtaining data from NFL games. In this post, we'll be using its suite of functions to get the data we need to build a predictive model.\n\nFirst, let's load in some important packages. We'll load in the `tidyverse` for data cleaning and manipulation. The `caret` and `lme4` packages for our model-building.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install and load packages\n#install.packages(\"nflreadr\")\nlibrary('nflreadr')\nlibrary('lme4')\nlibrary('caret')\nlibrary(\"tidyverse\")\nlibrary('pROC')\n```\n:::\n\n\n## Load Data\n\nNow that we have the relevant packages loaded, let's get started getting our data together. Starting with game data, we'll pull game results from 2011 - 2021. Here, we see that we get a schedule where each row (record) represents a game. There's a home and away team, corresponding scores, and more for each game.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Scrape schedule Results\nload_schedules(seasons = seq(2011,2021)) -> nfl_game_results \nhead(nfl_game_results)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 46\n  game_id   season game_type  week gameday weekday gametime away_team away_score\n  <chr>      <int> <chr>     <int> <chr>   <chr>   <chr>    <chr>          <int>\n1 2011_01_…   2011 REG           1 2011-0… Thursd… 20:30    NO                34\n2 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    PIT                7\n3 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    ATL               12\n4 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    CIN               27\n5 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    IND                7\n6 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    TEN               14\n# ℹ 37 more variables: home_team <chr>, home_score <int>, location <chr>,\n#   result <int>, total <int>, overtime <int>, old_game_id <chr>, gsis <int>,\n#   nfl_detail_id <chr>, pfr <chr>, pff <int>, espn <chr>, ftn <int>,\n#   away_rest <int>, home_rest <int>, away_moneyline <int>,\n#   home_moneyline <int>, spread_line <dbl>, away_spread_odds <int>,\n#   home_spread_odds <int>, total_line <dbl>, under_odds <int>,\n#   over_odds <int>, div_game <int>, roof <chr>, surface <chr>, temp <int>, …\n```\n\n\n:::\n:::\n\n\n\nWe've loaded our schedules in with some interesting variables to use in our model. However, it's not quite in the format we need it to be. Ideally, we'd like to feed in 2 games and have the model give us a winner.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnfl_game_results %>%\n  pivot_longer(cols = c(away_team,home_team),\n               names_to = \"home_away\",\n               values_to = \"team\") %>%\n  mutate(team_score = ifelse(home_away == \"home_team\",yes = home_score,no = away_score),\n         opp_score = ifelse(home_away == \"home_team\", away_score,home_score)) %>%  # sort for cumulative avg\n  arrange(season,week) %>%\n  select(season,game_id,team,team_score,opp_score,week) -> team_games\n```\n:::\n\n\nLet's use `pivot_longer()` to rearrange our dataset and select some simple variables before making the matchup set.\n\n## Feature Engineering\n\nOur goal is to be able to predict the outcome of each. To do that, we need to think about what impacts the outcome of a game before teams even take the field. \n\nIn the case of an NFL game it could things like player skill level, how far a team has to travel, injuries, even the food that players ate the night before. Using `nflreadr` we can see that there are tons of features we could see impacting the game such as .....\n\n\nFirst, let's start with what I think could have the biggest impact on ... team strength! \n\nThere are several ways to quantify team strength, some more complex then others, but for this quick tutorial, we will use recent results as a measure of team strength. The results will be in the form of Cumulative points scored/allowed and winning percentage leading up to the game.\n\nThen, we'll create some features...\n\nFirst, cumulative points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nteam_games %>%\n  arrange(week) %>%\n  group_by(season,team) %>%\n  mutate(cum_score_mean = cummean(team_score),\n          cum_score_opp = cummean(opp_score),\n          cum_wins = cumsum(team_score > opp_score),\n          cum_losses = cumsum(team_score < opp_score),\n          cum_ties = cumsum(team_score == opp_score),\n         cum_win_pct = cum_wins / (cum_wins + cum_losses),\n         cum_win_pct_lag_1 = lag(cum_win_pct,1),\n         cum_score_lag_1 = lag(cum_score_mean,1),\n         cum_opp_lag_1 = lag(cum_score_opp,1)\n         ) %>%\n  # Non-lag variables leak info\n  select(week,game_id,contains('lag_1')) %>%\n  ungroup() -> cum_avgs\n```\n:::\n\n\n\nWin percentage.\n\n\n::: {.cell ignore='true'}\n\n```{.r .cell-code}\nteam_games %>%\n  group_by(season,team) %>%\n  summarise(wins = sum(team_score > opp_score),\n            losses = sum(team_score < opp_score),\n            ties = sum(team_score == opp_score))%>%\n  ungroup() %>%\n  arrange(season) %>%\n  group_by(team) %>%\n  mutate(win_pct = wins / (wins + losses),\n         lag1_win_pct = lag(win_pct,1)) %>%\n  ungroup() -> team_win_pct\n```\n:::\n\n\nThis should be a good start, but I still feel like something is missing. If I'm trying to predict who will win the game, I want to see the injury report. I want to know who's actually in the game. Thankfully `nflreadr` provides that info.\n\nFirst, we load in depth charts and injury info because we want to know who will be injured, but also if they play an important role on their team. While it would be helpful to know which Niners RBs are out, it would probably helpful know if it's CMc or not.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndc = load_depth_charts(seq(2011,2021))\ninjuries = load_injuries(seq(2011,2021))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ninjuries %>%\n  filter(report_status == \"Out\") -> out_inj\n\ndc %>% \n  filter(depth_team == 1) -> starters\n\nstarters %>%\n  select(-c(last_name,first_name,position,full_name)) %>%\n  inner_join(out_inj, by = c('season','club_code' = 'team','gsis_id','game_type','week')) -> injured_starters\n\n# Number of injuries by position\ninjured_starters %>%\n  group_by(season,club_code,week,position) %>%\n  summarise(starters_injured = n()) %>%\n  ungroup() %>%\n  pivot_wider(names_from = position, names_prefix = \"injured_\",values_from = starters_injured) -> injuries_position\n\nhead(injuries_position)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 19\n  season club_code  week injured_S injured_LB injured_RB injured_T injured_C\n   <dbl> <chr>     <dbl>     <int>      <int>      <int>     <int>     <int>\n1   2011 ARI           7         1         NA         NA        NA        NA\n2   2011 ARI           8         1         NA         NA        NA        NA\n3   2011 ARI           9        NA          1          1        NA        NA\n4   2011 ARI          10         1          1         NA        NA        NA\n5   2011 ARI          11         1          1         NA        NA        NA\n6   2011 ARI          12         1          1         NA        NA        NA\n# ℹ 11 more variables: injured_DT <int>, injured_WR <int>, injured_CB <int>,\n#   injured_G <int>, injured_K <int>, injured_TE <int>, injured_QB <int>,\n#   injured_DE <int>, injured_P <int>, injured_LS <int>, injured_FB <int>\n```\n\n\n:::\n:::\n\n\nAlright, now we have some flags for injured starter at each position. Coming up, we need to bring all of our new features together.\n\n## Joins\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnfl_game_results %>%\n  inner_join(cum_avgs, by = c('game_id','season','home_team' = 'team')) %>%\n  inner_join(cum_avgs, by = c('game_id','season','away_team' = 'team'),suffix = c('_home','_away'))-> w_avgs\n\n# Check for stragglers\nnfl_game_results %>%\n  anti_join(cum_avgs, by = c('game_id','season','home_team' = 'team')) %>%\n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n\n```{.r .cell-code}\n# Join previous season's results\n#w_avgs %>%\n#  left_join(team_win_pct,by = c('season','home_team' = 'team')) %>%\n#  left_join(team_win_pct, by = c('away_team' = 'team','season'),suffix = c('_home','_away')) -> matchups\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Indicate whether home team won\nw_avgs %>%\n  mutate(home_win = result > 0) -> matchups\n```\n:::\n\n\n\nNow, let's bring in our injury data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatchups %>%\n  left_join(injuries_position,by = c('season','home_team'='club_code','week')) %>%\n  left_join(injuries_position,by = c('season','away_team'='club_code','week'),suffix = c('_home','_away')) %>%\n  mutate(across(starts_with('injured_'), ~replace_na(.x, 0))) -> matchup_full\n```\n:::\n\n\n\n\nAnd ... BOOM! We have a dataset with game matchups and some features to start out. Feel free to peruse the data to find potential features to include in our Model. \n\n\n# Building the Model\n\nBefore we do any preprocessing, let's split the data.\n\nFirst let's remove columns that might leak info to the model. Remember the model must only use information available prior to kickoff\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatchup_full %>%\n  select(-c(home_score,away_score,overtime,home_team,away_team,away_qb_name,home_qb_name)) -> matchup_ready\n```\n:::\n\n\nNow, let's look for the most ready \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolSums(is.na(matchup_ready))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n               game_id                 season              game_type \n                     0                      0                      0 \n                week.x                gameday                weekday \n                     0                      0                      0 \n              gametime               location                 result \n                     0                      0                      0 \n                 total            old_game_id                   gsis \n                     0                      0                      0 \n         nfl_detail_id                    pfr                    pff \n                  2685                      0                      0 \n                  espn                    ftn              away_rest \n                     0                   2137                      0 \n             home_rest         away_moneyline         home_moneyline \n                     0                      1                      1 \n           spread_line       away_spread_odds       home_spread_odds \n                     0                      1                      1 \n            total_line             under_odds              over_odds \n                     0                      1                      1 \n              div_game                   roof                surface \n                     0                      0                      0 \n                  temp                   wind             away_qb_id \n                   822                    822                      0 \n            home_qb_id             away_coach             home_coach \n                     0                      0                      0 \n               referee             stadium_id                stadium \n                     1                      0                      0 \n                week.y cum_win_pct_lag_1_home   cum_score_lag_1_home \n                     0                    178                    176 \n    cum_opp_lag_1_home                   week cum_win_pct_lag_1_away \n                   176                      0                    178 \n  cum_score_lag_1_away     cum_opp_lag_1_away               home_win \n                   176                    176                      0 \n        injured_S_home        injured_LB_home        injured_RB_home \n                     0                      0                      0 \n        injured_T_home         injured_C_home        injured_DT_home \n                     0                      0                      0 \n       injured_WR_home        injured_CB_home         injured_G_home \n                     0                      0                      0 \n        injured_K_home        injured_TE_home        injured_QB_home \n                     0                      0                      0 \n       injured_DE_home         injured_P_home        injured_LS_home \n                     0                      0                      0 \n       injured_FB_home         injured_S_away        injured_LB_away \n                     0                      0                      0 \n       injured_RB_away         injured_T_away         injured_C_away \n                     0                      0                      0 \n       injured_DT_away        injured_WR_away        injured_CB_away \n                     0                      0                      0 \n        injured_G_away         injured_K_away        injured_TE_away \n                     0                      0                      0 \n       injured_QB_away        injured_DE_away         injured_P_away \n                     0                      0                      0 \n       injured_LS_away        injured_FB_away \n                     0                      0 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Hold \ntrainIndex <- createDataPartition(matchup_full$home_win, p = 0.7, list = FALSE)\ntrain_data <- matchup_full[trainIndex, ]\ntest_data <- matchup_full[-trainIndex, ] %>%\n  # Remove first season\n  filter(season != 2011)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(train_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 87\n  game_id  season game_type week.x gameday weekday gametime away_team away_score\n  <chr>     <dbl> <chr>      <int> <chr>   <chr>   <chr>    <chr>          <int>\n1 2011_01…   2011 REG            1 2011-0… Thursd… 20:30    NO                34\n2 2011_01…   2011 REG            1 2011-0… Sunday  13:00    PIT                7\n3 2011_01…   2011 REG            1 2011-0… Sunday  13:00    ATL               12\n4 2011_01…   2011 REG            1 2011-0… Sunday  13:00    CIN               27\n5 2011_01…   2011 REG            1 2011-0… Sunday  13:00    IND                7\n6 2011_01…   2011 REG            1 2011-0… Sunday  13:00    TEN               14\n# ℹ 78 more variables: home_team <chr>, home_score <int>, location <chr>,\n#   result <int>, total <int>, overtime <int>, old_game_id <chr>, gsis <int>,\n#   nfl_detail_id <chr>, pfr <chr>, pff <int>, espn <chr>, ftn <int>,\n#   away_rest <int>, home_rest <int>, away_moneyline <int>,\n#   home_moneyline <int>, spread_line <dbl>, away_spread_odds <int>,\n#   home_spread_odds <int>, total_line <dbl>, under_odds <int>,\n#   over_odds <int>, div_game <int>, roof <chr>, surface <chr>, temp <int>, …\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}