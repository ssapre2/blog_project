[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/Hoops/index.html",
    "href": "posts/Hoops/index.html",
    "title": "We’re Playing Basketball",
    "section": "",
    "text": "This is a post for my basketball post!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hello everyone! My name is Sameer Sapre and I am an analyst working in the Baseball Projects group with the Seattle Mariners.\nI am also currently a graduate student at the University of Washington studying Industrial Engineering.\nIn my free time, I enjoy playing new sports, hiking, and cooking with friends.\nOutside of work and school I am a volunteer usher with Seattle Thetre Group and am the VP of Public Relationships for my local Toastmaster’s chapter."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sameer’s Blog",
    "section": "",
    "text": "Predicting NFL Game Outcomes with nflfastR\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJun 30, 2024\n\n\nSameer Sapre\n\n\n\n\n\n\n\n\n\n\n\n\nWe’re Playing Basketball\n\n\n\n\n\n\nNBA\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nMay 16, 2024\n\n\nSameer Sapre\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nMay 16, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nMay 13, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/nfl-game-prediction/index.html",
    "href": "posts/nfl-game-prediction/index.html",
    "title": "Predicting NFL Game Outcomes with nflfastR",
    "section": "",
    "text": "Hello everyone! Today I want to share a quick tutorial on using nflreadR to build a simple game outcome model.\nFirst, a quick introduction of nflreadR - it’s part of the nflverse family of packages in R that all easily and efficiently obtaining data from NFL games. In this post, we’ll be using its suite of functions to get the data we need to build a predictive model.\nFirst, let’s load in some important packages. We’ll load in the tidyverse for data cleaning and manipulation. The caret and lme4 packages for our model-building.\n\n# install and load packages\n#install.packages(\"nflreadr\")\nlibrary('nflreadr')\nlibrary('lme4')\nlibrary('caret')\nlibrary(\"tidyverse\")\nlibrary('pROC')"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/nfl-game-prediction/index.html#intro",
    "href": "posts/nfl-game-prediction/index.html#intro",
    "title": "Predicting NFL Game Outcomes with nflfastR",
    "section": "",
    "text": "Hello everyone! Today I want to share a quick tutorial on using nflreadR to build a simple game outcome model.\nFirst, a quick introduction of nflreadR - it’s part of the nflverse family of packages in R that all easily and efficiently obtaining data from NFL games. In this post, we’ll be using its suite of functions to get the data we need to build a predictive model.\nFirst, let’s load in some important packages. We’ll load in the tidyverse for data cleaning and manipulation. The caret and lme4 packages for our model-building.\n\n# install and load packages\n#install.packages(\"nflreadr\")\nlibrary('nflreadr')\nlibrary('lme4')\nlibrary('caret')\nlibrary(\"tidyverse\")\nlibrary('pROC')"
  },
  {
    "objectID": "posts/nfl-game-prediction/index.html#load-data",
    "href": "posts/nfl-game-prediction/index.html#load-data",
    "title": "Predicting NFL Game Outcomes with nflfastR",
    "section": "Load Data",
    "text": "Load Data\nNow that we have the relevant packages loaded, let’s get started getting our data together. Starting with game data, we’ll pull game results from 2011 - 2021. Here, we see that we get a schedule where each row (record) represents a game. There’s a home and away team, corresponding scores, and more for each game.\n\n# Scrape schedule Results\nload_schedules(seasons = seq(2011,2021)) -&gt; nfl_game_results \nhead(nfl_game_results)\n\n# A tibble: 6 × 46\n  game_id   season game_type  week gameday weekday gametime away_team away_score\n  &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;     &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;          &lt;int&gt;\n1 2011_01_…   2011 REG           1 2011-0… Thursd… 20:30    NO                34\n2 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    PIT                7\n3 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    ATL               12\n4 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    CIN               27\n5 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    IND                7\n6 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    TEN               14\n# ℹ 37 more variables: home_team &lt;chr&gt;, home_score &lt;int&gt;, location &lt;chr&gt;,\n#   result &lt;int&gt;, total &lt;int&gt;, overtime &lt;int&gt;, old_game_id &lt;chr&gt;, gsis &lt;int&gt;,\n#   nfl_detail_id &lt;chr&gt;, pfr &lt;chr&gt;, pff &lt;int&gt;, espn &lt;chr&gt;, ftn &lt;int&gt;,\n#   away_rest &lt;int&gt;, home_rest &lt;int&gt;, away_moneyline &lt;int&gt;,\n#   home_moneyline &lt;int&gt;, spread_line &lt;dbl&gt;, away_spread_odds &lt;int&gt;,\n#   home_spread_odds &lt;int&gt;, total_line &lt;dbl&gt;, under_odds &lt;int&gt;,\n#   over_odds &lt;int&gt;, div_game &lt;int&gt;, roof &lt;chr&gt;, surface &lt;chr&gt;, temp &lt;int&gt;, …\n\n\nWe’ve loaded our schedules in with some interesting variables to use in our model. However, it’s not quite in the format we need it to be. Ideally, we’d like to feed in 2 games and have the model give us a winner.\n\nnfl_game_results %&gt;%\n  pivot_longer(cols = c(away_team,home_team),\n               names_to = \"home_away\",\n               values_to = \"team\") %&gt;%\n  mutate(team_score = ifelse(home_away == \"home_team\",yes = home_score,no = away_score),\n         opp_score = ifelse(home_away == \"home_team\", away_score,home_score)) %&gt;%  # sort for cumulative avg\n  arrange(season,week) %&gt;%\n  select(season,game_id,team,team_score,opp_score,week) -&gt; team_games\n\nLet’s use pivot_longer() to rearrange our dataset and select some simple variables before making the matchup set."
  },
  {
    "objectID": "posts/nfl-game-prediction/index.html#feature-engineering",
    "href": "posts/nfl-game-prediction/index.html#feature-engineering",
    "title": "Predicting NFL Game Outcomes with nflfastR",
    "section": "Feature Engineering",
    "text": "Feature Engineering\nOur goal is to be able to predict the outcome of each. To do that, we need to think about what impacts the outcome of a game before teams even take the field.\nIn the case of an NFL game it could things like player skill level, how far a team has to travel, injuries, even the food that players ate the night before. Using nflreadr we can see that there are tons of features we could see impacting the game such as …..\nFirst, let’s start with what I think could have the biggest impact on … team strength!\nThere are several ways to quantify team strength, some more complex then others, but for this quick tutorial, we will use recent results as a measure of team strength. The results will be in the form of Cumulative points scored/allowed and winning percentage leading up to the game.\nThen, we’ll create some features…\nFirst, cumulative points.\n\nteam_games %&gt;%\n  arrange(week) %&gt;%\n  group_by(season,team) %&gt;%\n  mutate(cum_score_mean = cummean(team_score),\n          cum_score_opp = cummean(opp_score),\n          cum_wins = cumsum(team_score &gt; opp_score),\n          cum_losses = cumsum(team_score &lt; opp_score),\n          cum_ties = cumsum(team_score == opp_score),\n         cum_win_pct = cum_wins / (cum_wins + cum_losses),\n         cum_win_pct_lag_1 = lag(cum_win_pct,1),\n         cum_score_lag_1 = lag(cum_score_mean,1),\n         cum_opp_lag_1 = lag(cum_score_opp,1)\n         ) %&gt;%\n  # Non-lag variables leak info\n  select(week,game_id,contains('lag_1')) %&gt;%\n  ungroup() -&gt; cum_avgs\n\nWin percentage.\n\nteam_games %&gt;%\n  group_by(season,team) %&gt;%\n  summarise(wins = sum(team_score &gt; opp_score),\n            losses = sum(team_score &lt; opp_score),\n            ties = sum(team_score == opp_score))%&gt;%\n  ungroup() %&gt;%\n  arrange(season) %&gt;%\n  group_by(team) %&gt;%\n  mutate(win_pct = wins / (wins + losses),\n         lag1_win_pct = lag(win_pct,1)) %&gt;%\n  ungroup() -&gt; team_win_pct\n\nThis should be a good start, but I still feel like something is missing. If I’m trying to predict who will win the game, I want to see the injury report. I want to know who’s actually in the game. Thankfully nflreadr provides that info.\nFirst, we load in depth charts and injury info because we want to know who will be injured, but also if they play an important role on their team. While it would be helpful to know which Niners RBs are out, it would probably helpful know if it’s CMc or not.\n\ndc = load_depth_charts(seq(2011,2021))\ninjuries = load_injuries(seq(2011,2021))\n\n\ninjuries %&gt;%\n  filter(report_status == \"Out\") -&gt; out_inj\n\ndc %&gt;% \n  filter(depth_team == 1) -&gt; starters\n\nstarters %&gt;%\n  select(-c(last_name,first_name,position,full_name)) %&gt;%\n  inner_join(out_inj, by = c('season','club_code' = 'team','gsis_id','game_type','week')) -&gt; injured_starters\n\n# Number of injuries by position\ninjured_starters %&gt;%\n  group_by(season,club_code,week,position) %&gt;%\n  summarise(starters_injured = n()) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from = position, names_prefix = \"injured_\",values_from = starters_injured) -&gt; injuries_position\n\nhead(injuries_position)\n\n# A tibble: 6 × 19\n  season club_code  week injured_S injured_LB injured_RB injured_T injured_C\n   &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt;     &lt;int&gt;      &lt;int&gt;      &lt;int&gt;     &lt;int&gt;     &lt;int&gt;\n1   2011 ARI           7         1         NA         NA        NA        NA\n2   2011 ARI           8         1         NA         NA        NA        NA\n3   2011 ARI           9        NA          1          1        NA        NA\n4   2011 ARI          10         1          1         NA        NA        NA\n5   2011 ARI          11         1          1         NA        NA        NA\n6   2011 ARI          12         1          1         NA        NA        NA\n# ℹ 11 more variables: injured_DT &lt;int&gt;, injured_WR &lt;int&gt;, injured_CB &lt;int&gt;,\n#   injured_G &lt;int&gt;, injured_K &lt;int&gt;, injured_TE &lt;int&gt;, injured_QB &lt;int&gt;,\n#   injured_DE &lt;int&gt;, injured_P &lt;int&gt;, injured_LS &lt;int&gt;, injured_FB &lt;int&gt;\n\n\nAlright, now we have some flags for injured starter at each position. Coming up, we need to bring all of our new features together."
  },
  {
    "objectID": "posts/nfl-game-prediction/index.html#joins",
    "href": "posts/nfl-game-prediction/index.html#joins",
    "title": "Predicting NFL Game Outcomes with nflfastR",
    "section": "Joins",
    "text": "Joins\n\nnfl_game_results %&gt;%\n  inner_join(cum_avgs, by = c('game_id','season','week','home_team' = 'team')) %&gt;%\n  inner_join(cum_avgs, by = c('game_id','season','week','away_team' = 'team'),suffix = c('_home','_away'))-&gt; w_avgs\n\n# Check for stragglers\nnfl_game_results %&gt;%\n  anti_join(cum_avgs, by = c('game_id','season','home_team' = 'team','week')) %&gt;%\n  nrow()\n\n[1] 0\n\n# Join previous season's results\n#w_avgs %&gt;%\n#  left_join(team_win_pct,by = c('season','home_team' = 'team')) %&gt;%\n#  left_join(team_win_pct, by = c('away_team' = 'team','season'),suffix = c('_home','_away')) -&gt; matchups\n\n\n# Indicate whether home team won\nw_avgs %&gt;%\n  mutate(home_win = result &gt; 0) -&gt; matchups\n\nNow, let’s bring in our injury data.\n\nmatchups %&gt;%\n  left_join(injuries_position,by = c('season','home_team'='club_code','week')) %&gt;%\n  left_join(injuries_position,by = c('season','away_team'='club_code','week'),suffix = c('_home','_away')) %&gt;%\n  mutate(across(starts_with('injured_'), ~replace_na(.x, 0))) -&gt; matchup_full\n\nmatchup_full %&gt;%\n  # Transform outcome into factor variable\n  mutate(home_win = as.factor(home_win)) -&gt; matchup_full\n\nAnd … BOOM! We have a dataset with game matchups and some features to start out. Feel free to peruse the data to find potential features to include in our Model."
  },
  {
    "objectID": "posts/nfl-game-prediction/index.html#modeling",
    "href": "posts/nfl-game-prediction/index.html#modeling",
    "title": "Predicting NFL Game Outcomes with nflfastR",
    "section": "Modeling",
    "text": "Modeling\nAhh finally, now we can get to the actual model building…. which we’ll do in about 3 lines of code.\n\n# Penalized Linear Regression\n# Mixture = 1 means pure lasso\nlr_mod &lt;- \n  logistic_reg(penalty = 0.1, mixture = 1) %&gt;% \n  set_engine(\"glmnet\")\n\n\n# create a workflow using recipe and model objects\ngame_pred_wflow &lt;- \n  workflow() %&gt;% \n  add_model(lr_mod) %&gt;% \n  add_recipe(rec_impute)\n\n\nlibrary('glmnet')\n\nprep(rec_impute,training = train_data)\n\ngame_fit &lt;- \n  game_pred_wflow %&gt;% \n  fit(data = train_data)\n\nCheck model fit object and coefficient estimates.\n\nextract_fit_parsnip(game_fit) %&gt;%\n  tidy()\n\n# A tibble: 7 × 3\n  term                   estimate penalty\n  &lt;chr&gt;                     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)               0.229     0.1\n2 cum_score_lag_1_home      0         0.1\n3 cum_opp_lag_1_home        0         0.1\n4 cum_score_lag_1_away      0         0.1\n5 cum_opp_lag_1_away        0         0.1\n6 cum_win_pct_lag_1_home    0         0.1\n7 cum_win_pct_lag_1_away    0         0.1"
  }
]