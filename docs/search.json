[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hello everyone! My name is Sameer Sapre and I am an analyst working in the Baseball Projects group with the Seattle Mariners.\nI am also currently a graduate student at the University of Washington studying Industrial Engineering.\nIn my free time, I enjoy playing new sports, hiking, and cooking with friends.\nOutside of work and school I am a volunteer usher with Seattle Thetre Group and am the VP of Public Relationships for my local Toastmaster’s chapter."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sameer’s Blog",
    "section": "",
    "text": "Predicting NFL Game Outcomes with nflfastR\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJun 30, 2024\n\n\nSameer Sapre\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/nfl-game-prediction/index.html",
    "href": "posts/nfl-game-prediction/index.html",
    "title": "Predicting NFL Game Outcomes with nflfastR",
    "section": "",
    "text": "Hello everyone! Today I want to share a tutorial on using nflreadR to read historic NFL results and model game outcomes with tidymodels.\nFirst, a quick introduction of the R packages we’ll use. nflreadR is a part of the nflverse family of packages that easily and efficiently obtain data from NFL games. This includes past games results and statistics. In this post, we’ll be using its suite of functions to get the data we need to build a simple predictive model. We’ll also use the tidymodels package to setup our model and tidyverse for data cleaning and manipulation.\n\n# install and load packages\n#install.packages(\"nflreadr\")\nlibrary('nflreadr')\nlibrary(\"tidyverse\")\nlibrary('pROC')\nlibrary('tidymodels')"
  },
  {
    "objectID": "posts/nfl-game-prediction/index.html#intro",
    "href": "posts/nfl-game-prediction/index.html#intro",
    "title": "Predicting NFL Game Outcomes with nflfastR",
    "section": "",
    "text": "Hello everyone! Today I want to share a tutorial on using nflreadR to read historic NFL results and model game outcomes with tidymodels.\nFirst, a quick introduction of the R packages we’ll use. nflreadR is a part of the nflverse family of packages that easily and efficiently obtain data from NFL games. This includes past games results and statistics. In this post, we’ll be using its suite of functions to get the data we need to build a simple predictive model. We’ll also use the tidymodels package to setup our model and tidyverse for data cleaning and manipulation.\n\n# install and load packages\n#install.packages(\"nflreadr\")\nlibrary('nflreadr')\nlibrary(\"tidyverse\")\nlibrary('pROC')\nlibrary('tidymodels')"
  },
  {
    "objectID": "posts/nfl-game-prediction/index.html#load-data",
    "href": "posts/nfl-game-prediction/index.html#load-data",
    "title": "Predicting NFL Game Outcomes with nflfastR",
    "section": "Load Data",
    "text": "Load Data\nNow that we have the relevant packages loaded, let’s get started getting our data together. Starting with game data, we’ll pull game results from 2011 - 2021. Here, we see that we get a schedule where each row (record) represents a game. There’s a home and away team, corresponding scores, and more contextual information for each game.\n\n# Scrape schedule Results\nload_schedules(seasons = seq(2011,2024)) -&gt; nfl_game_results \nhead(nfl_game_results)\n\n# A tibble: 6 × 46\n  game_id   season game_type  week gameday weekday gametime away_team away_score\n  &lt;chr&gt;      &lt;int&gt; &lt;chr&gt;     &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;    &lt;chr&gt;          &lt;int&gt;\n1 2011_01_…   2011 REG           1 2011-0… Thursd… 20:30    NO                34\n2 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    PIT                7\n3 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    ATL               12\n4 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    CIN               27\n5 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    IND                7\n6 2011_01_…   2011 REG           1 2011-0… Sunday  13:00    TEN               14\n# ℹ 37 more variables: home_team &lt;chr&gt;, home_score &lt;int&gt;, location &lt;chr&gt;,\n#   result &lt;int&gt;, total &lt;int&gt;, overtime &lt;int&gt;, old_game_id &lt;chr&gt;, gsis &lt;int&gt;,\n#   nfl_detail_id &lt;chr&gt;, pfr &lt;chr&gt;, pff &lt;int&gt;, espn &lt;chr&gt;, ftn &lt;int&gt;,\n#   away_rest &lt;int&gt;, home_rest &lt;int&gt;, away_moneyline &lt;int&gt;,\n#   home_moneyline &lt;int&gt;, spread_line &lt;dbl&gt;, away_spread_odds &lt;int&gt;,\n#   home_spread_odds &lt;int&gt;, total_line &lt;dbl&gt;, under_odds &lt;int&gt;,\n#   over_odds &lt;int&gt;, div_game &lt;int&gt;, roof &lt;chr&gt;, surface &lt;chr&gt;, temp &lt;int&gt;, …\n\n\nWe’ve loaded our schedules in with some interesting variables to use in our model. However, it’s not quite in the format we need it to be. Ideally, we’d like to feed in 2 teams and have the model give us a winner.\n\nnfl_game_results %&gt;%\n  # Remove the upcoming season\n  filter(season &lt; 2024) %&gt;%\n  pivot_longer(cols = c(away_team,home_team),\n               names_to = \"home_away\",\n               values_to = \"team\") %&gt;%\n  mutate(team_score = ifelse(home_away == \"home_team\",yes = home_score,no = away_score),\n         opp_score = ifelse(home_away == \"home_team\", away_score,home_score)) %&gt;%  # sort for cumulative avg\n  arrange(season,week) %&gt;%\n  select(season,game_id,team,team_score,opp_score,week) -&gt; team_games\n\nLet’s use pivot_longer() to rearrange our dataset and select some simple variables before making the matchup set."
  },
  {
    "objectID": "posts/nfl-game-prediction/index.html#feature-engineering",
    "href": "posts/nfl-game-prediction/index.html#feature-engineering",
    "title": "Predicting NFL Game Outcomes with nflfastR",
    "section": "Feature Engineering",
    "text": "Feature Engineering\nOur goal is to be able to predict the outcome of each. To do that, we need to think about what impacts the outcome of a game before teams even take the field.\nIn the case of an NFL game it could be things like player skill level, how far a team has to travel, injuries, even the food that players ate the night before. Using nflreadr we can see that there are several variables that can potentially impact the game’s outcome from injuries to previous results.\nWe’ll start off by pulling in previous_results. By using previous results, we can hopefully capture a team’s quality as a predictor for how they will perform in the next game. There are several ways to quantify team strength, some more complex than others, but for this tutorial, we will use cumulative results as a measure of team strength. The results will be in the form of cumulative points scored/allowed and winning percentage leading up to the game.\n\nteam_games %&gt;%\n  arrange(week) %&gt;%\n  group_by(season,team) %&gt;%\n  # For each team's season calculate the cumulative scores for after each week\n  mutate(cumul_score_mean = cummean(team_score),\n          cumul_score_opp = cummean(opp_score),\n          cumul_wins = cumsum(team_score &gt; opp_score),\n          cumul_losses = cumsum(team_score &lt; opp_score),\n          cumul_ties = cumsum(team_score == opp_score),\n         cumul_win_pct = cumul_wins / (cumul_wins + cumul_losses),\n         # Create the lag variable\n         cumul_win_pct_lag_1 = lag(cumul_win_pct,1),\n         cumul_score_lag_1 = lag(cumul_score_mean,1),\n         cumul_opp_lag_1 = lag(cumul_score_opp,1)\n         ) %&gt;%\n  # Non-lag variables leak info\n  select(week,game_id,contains('lag_1')) %&gt;%\n  ungroup() -&gt; cumul_avgs\n\nLet’s also calculate winning percentage as a feature.\n\nteam_games %&gt;%\n  group_by(season,team) %&gt;%\n  summarise(wins = sum(team_score &gt; opp_score),\n            losses = sum(team_score &lt; opp_score),\n            ties = sum(team_score == opp_score))%&gt;%\n  ungroup() %&gt;%\n  arrange(season) %&gt;%\n  group_by(team) %&gt;%\n  mutate(win_pct = wins / (wins + losses),\n         lag1_win_pct = lag(win_pct,1)) %&gt;%\n  ungroup() -&gt; team_win_pct\n\nThis should be a good start, but I still feel like something is missing. Football is a dangerous game and players regularly get injured. Thankfully nflreadr provides weekly injury reports. Let’s try incorporating that into our model.\n\n# Load depth charts and injury reports\ndc = load_depth_charts(seq(2011,most_recent_season()))\ninjuries = load_injuries(seq(2011,most_recent_season()))\n\n\ninjuries %&gt;%\n  filter(report_status == \"Out\") -&gt; out_inj\n\ndc %&gt;% \n  filter(depth_team == 1) -&gt; starters\n\n# Determine roster position of injured players\nstarters %&gt;%\n  select(-c(last_name,first_name,position,full_name)) %&gt;%\n  inner_join(out_inj, by = c('season','club_code' = 'team','gsis_id','game_type','week')) -&gt; injured_starters\n\n# Number of injuries by position\ninjured_starters %&gt;%\n  group_by(season,club_code,week,position) %&gt;%\n  summarise(starters_injured = n()) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from = position, names_prefix = \"injured_\",values_from = starters_injured) -&gt; injuries_position\n\nhead(injuries_position)\n\n# A tibble: 6 × 19\n  season club_code  week injured_S injured_LB injured_RB injured_T injured_C\n   &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt;     &lt;int&gt;      &lt;int&gt;      &lt;int&gt;     &lt;int&gt;     &lt;int&gt;\n1   2011 ARI           7         1         NA         NA        NA        NA\n2   2011 ARI           8         1         NA         NA        NA        NA\n3   2011 ARI           9        NA          1          1        NA        NA\n4   2011 ARI          10         1          1         NA        NA        NA\n5   2011 ARI          11         1          1         NA        NA        NA\n6   2011 ARI          12         1          1         NA        NA        NA\n# ℹ 11 more variables: injured_DT &lt;int&gt;, injured_WR &lt;int&gt;, injured_CB &lt;int&gt;,\n#   injured_G &lt;int&gt;, injured_K &lt;int&gt;, injured_TE &lt;int&gt;, injured_QB &lt;int&gt;,\n#   injured_DE &lt;int&gt;, injured_LS &lt;int&gt;, injured_P &lt;int&gt;, injured_FB &lt;int&gt;\n\n\nAlright, now we have some flags for injured starter at each position. Next, we need to bring all of our new features together."
  },
  {
    "objectID": "posts/nfl-game-prediction/index.html#joins",
    "href": "posts/nfl-game-prediction/index.html#joins",
    "title": "Predicting NFL Game Outcomes with nflfastR",
    "section": "Joins",
    "text": "Joins\n\nnfl_game_results %&gt;%\n  inner_join(cumul_avgs, by = c('game_id','season','week','home_team' = 'team')) %&gt;%\n  inner_join(cumul_avgs, by = c('game_id','season','week','away_team' = 'team'),suffix = c('_home','_away'))-&gt; w_avgs\n\n# Check for stragglers\nnfl_game_results %&gt;%\n  anti_join(cumul_avgs, by = c('game_id','season','home_team' = 'team','week')) -&gt; unplayed_games\n\n# Join previous season's results\n#w_avgs %&gt;%\n#  left_join(team_win_pct,by = c('season','home_team' = 'team')) %&gt;%\n#  left_join(team_win_pct, by = c('away_team' = 'team','season'),suffix = c('_home','_away')) -&gt; matchups\n\n\n# Indicate whether home team won\nw_avgs %&gt;%\n  mutate(home_win = as.numeric(result &gt; 0)) -&gt; matchups\n\nNow, let’s bring in our injury data.\n\nmatchups %&gt;%\n  left_join(injuries_position,by = c('season','home_team'='club_code','week')) %&gt;%\n  left_join(injuries_position,by = c('season','away_team'='club_code','week'),suffix = c('_home','_away')) %&gt;%\n  mutate(across(starts_with('injured_'), ~replace_na(.x, 0))) -&gt; matchup_full\n\nAnd … BOOM! We have a dataset with game-by-game matchups and some features to start out. Feel free to peruse the data to find potential features to include in our Model."
  },
  {
    "objectID": "posts/nfl-game-prediction/index.html#modeling",
    "href": "posts/nfl-game-prediction/index.html#modeling",
    "title": "Predicting NFL Game Outcomes with nflfastR",
    "section": "Modeling",
    "text": "Modeling\nAhh finally, now we can get to the actual model building…. which we’ll do in about 3 lines of code.\n\nlibrary('glmnet')\n# Penalized Linear Regression\n# Mixture = 1 means pure lasso\nlr_mod &lt;- \n  logistic_reg(mixture = 0.05,penalty = 1) %&gt;% \n  set_engine(\"glmnet\")\n\nAnd that’s it! We’ll start off with a basic logistic regression. There are a few tunable (though we won’t be tuning in this post) parameters, but we’ll manually set them for this exercise.\nNext, we want to train our model with cross-validation, so that we can train and test against different samples to avoid an overfit model as much as we can.\n\n# Create folds for cross-validation\nfolds &lt;- vfold_cv(train_data)\n\nThe tidymodels workflow helps organize the steps of the model creation and consolidate model objects. We won’t go into details of workflows in this post, but there is plenty of online documentation.\n\n# create a workflow using recipe and model objects\ngame_pred_wflow &lt;- \n  workflow() %&gt;% \n  add_model(lr_mod) %&gt;% \n  add_recipe(rec_impute)\n\n\nfit_cv = game_pred_wflow %&gt;%\n  fit_resamples(folds)\n\nCheck for best model fit. It looks like using ROC-AUC and accuracy agree that the first model is the best.\n\ncollect_metrics(fit_cv)\n\n# A tibble: 3 × 6\n  .metric     .estimator  mean     n std_err .config             \n  &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 accuracy    binary     0.629    10 0.00854 Preprocessor1_Model1\n2 brier_class binary     0.228    10 0.00108 Preprocessor1_Model1\n3 roc_auc     binary     0.725    10 0.0122  Preprocessor1_Model1\n\n\nExtract best model fit.\n\nfinal_wf = game_pred_wflow %&gt;%\n  last_fit(splits)\n\n\nfinal_model = extract_workflow(final_wf)\n\nGet variable estimates and penalty terms.\n\nfinal_model %&gt;%\n  extract_fit_engine() %&gt;%\n  tidy() %&gt;%\n  rename(penalty = lambda)\n\n# A tibble: 3,596 × 5\n   term         step estimate penalty dev.ratio\n   &lt;chr&gt;       &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n 1 (Intercept)     1    0.239    3.85 -2.07e-14\n 2 (Intercept)     2    0.237    3.51  1.74e- 3\n 3 (Intercept)     3    0.234    3.20  4.75e- 3\n 4 (Intercept)     4    0.229    2.91  8.26e- 3\n 5 (Intercept)     5    0.225    2.66  1.19e- 2\n 6 (Intercept)     6    0.220    2.42  1.57e- 2\n 7 (Intercept)     7    0.215    2.20  1.95e- 2\n 8 (Intercept)     8    0.210    2.01  2.35e- 2\n 9 (Intercept)     9    0.205    1.83  2.75e- 2\n10 (Intercept)    10    0.199    1.67  3.16e- 2\n# ℹ 3,586 more rows\n\n\n\n# Align predictions to test dataset\npredicted_df = augment(final_model,test_data) \n\nNow, so we get a sample boost, let’s retrain the model on the full training sample.\n\n# Extract model specs\nfinal_model %&gt;%\n  extract_spec_parsnip() -&gt; final_specs\n\n# Update workflow object and retrain on full training set w/ same parameters\ngame_pred_wflow %&gt;%\n  update_model(spec = final_specs) %&gt;%\n  # Bind test and training data together\n  fit(data = cbind(train_data,test_data))-&gt; final_flow\n\nLet’s now save the model for future use and investigation.\n\nfinal_model %&gt;%\n  save(file = \"gamePred_model2024.rda\")\n\nWe’ll use this model to make predictions on future games and evaluate how our model performs in real-time."
  }
]