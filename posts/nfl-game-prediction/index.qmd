---
title: "Predicting NFL Game Outcomes with nflfastR"
author: "Sameer Sapre"
date: "2024-06-30"
categories: [news, code, analysis]
image: "nflfastR.png"
execute: 
  warning: false
  
---

## Intro

Hello everyone! Today I want to share a quick tutorial on using `nflreadR` to build a simple game outcome model.

First, a quick introduction of `nflreadR` - it's part of the `nflverse` family of packages in R that all easily and efficiently obtaining data from NFL games. In this post, we'll be using its suite of functions to get the data we need to build a predictive model.

First, let's load in some important packages. We'll load in the `tidyverse` for data cleaning and manipulation. The `caret` and `lme4` packages for our model-building.

```{r}
# install and load packages
#install.packages("nflreadr")
library('nflreadr')
library('lme4')
library('caret')
library("tidyverse")
library('pROC')

```

## Load Data

Now that we have the relevant packages loaded, let's get started getting our data together. Starting with game data, we'll pull game results from 2011 - 2021

```{r}
# Scrape schedule Results
load_schedules(seasons = seq(2011,2021)) -> nfl_game_results 
head(nfl_game_results)
```


We've loaded our schedules in with some interesting variables to use in our model. However, it's not quite in the format we need it to be. Ideally, we'd like to feed in 2 games and have the model give us a winner.

```{r}
nfl_game_results %>%
  pivot_longer(cols = c(away_team,home_team),
               names_to = "home_away",
               values_to = "team") %>%
  mutate(team_score = ifelse(home_away == "home_team",yes = home_score,no = away_score),
         opp_score = ifelse(home_away == "home_team", away_score,home_score)) %>%  # sort for cumulative avg
  arrange(season,week) %>%
  select(season,game_id,team,team_score,opp_score) -> team_games
```

Let's use `pivot_longer()` to rearrange our dataset and select some simple variables before making the matchup set.

Then, we'll create some features measuring cumalitve and scores

```{r}
team_games %>%
  group_by(season,team) %>%
  mutate(cum_score_mean = cummean(team_score),
          cum_score_opp = cummean(opp_score),
          cum_wins = cumsum(team_score > opp_score),
          cum_losses = cumsum(team_score < opp_score),
          cum_ties = cumsum(team_score == opp_score),
         cum_win_pct = cum_wins / (cum_wins + cum_losses),
         cum_win_pct_lag = lag(cum_win_pct,1),
         cum_score_lag_1 = lag(cum_score_mean,1),
         cum_opp_lag_1 = lag(cum_score_opp,1)
         ) %>%
  ungroup() -> cum_avgs
```

